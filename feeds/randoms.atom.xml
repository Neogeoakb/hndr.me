<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>hndr (dot) me</title><link href="http://hndr.me/" rel="alternate"></link><link href="http://hndr.me/feeds/randoms.atom.xml" rel="self"></link><id>http://hndr.me/</id><updated>2013-06-14T19:41:00+08:00</updated><entry><title>Setting up stuffs onÂ Linux</title><link href="http://hndr.me/blog/setting-up-stuffs-on-linux" rel="alternate"></link><updated>2013-06-14T19:41:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2013-06-14:blog/setting-up-stuffs-on-linux</id><summary type="html">&lt;p&gt;My Linux system has been pretty much set up for most things I need, since of course, Linux Mint
itself comes with a lot of stuffs such as python, and such. I myself am pretty surprised
how much I have settled in. Still, there are still a number of stuffs that I need to add.
First of, the utilities that includes stuffs such as gcc, cmake, curl, and all the&amp;nbsp;stuff.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;essential&lt;/span&gt; &lt;span class="n"&gt;curl&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Python&lt;/h1&gt;
&lt;p&gt;Python 2.7 comes pre-installed on most Linux system, so there isn&amp;#8217;t much to do here. Python 3 has
started to gain more traction these days, with a lot of projects has been ported to it, and some
new ones that are written in it. The day where I would have to deal with Python versions aren&amp;#8217;t
too far, but for now, I don&amp;#8217;t have much use for it yet, so 2.7 is good enough for me. I do
need to install the development header for some of the libraries that might need it though,&amp;nbsp;so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;pip, virtualenv,&amp;nbsp;virtualenvwrapper&lt;/h2&gt;
&lt;p&gt;The apt-get for Python, tool to manage isolated Python packages, and a wrapper to make using it&amp;nbsp;easy. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;upgrade&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;virtualenv&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;virtualenvwrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Those command first install &lt;code&gt;pip&lt;/code&gt; from the software repository, then use &lt;code&gt;pip&lt;/code&gt; to update itself
from the PyPI since the one in the software repository can be severely outdated, and then install
&lt;code&gt;virtualenv&lt;/code&gt; and &lt;code&gt;virtualenvwrapper&lt;/code&gt;. To finish up installing &lt;code&gt;virtualenvwrapper&lt;/code&gt;, put this
somewhere in the startup script (&lt;code&gt;~/.zshrc&lt;/code&gt; in my case). Of course change the path according the
the&amp;nbsp;configuration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;WORKON_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;&lt;span class="caps"&gt;HOME&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;venvs&lt;/span&gt;
&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;PROJECT_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;&lt;span class="caps"&gt;HOME&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Projects&lt;/span&gt;
&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;virtualenvwrapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Ruby&lt;/h1&gt;
&lt;p&gt;I don&amp;#8217;t actually know how to program in Ruby. At All. But, there are a bunch of cools tools written
in Ruby that are simply can&amp;#8217;t be replaced easily, things like &lt;a href="https://github.com/nex3/sass"&gt;&lt;span class="caps"&gt;SCSS&lt;/span&gt;&lt;/a&gt; and &lt;a href="https://github.com/guard/guard-livereload"&gt;guard-livereload&lt;/a&gt;.
I don&amp;#8217;t want to spend too much time on this, so I just took the first guide I found and follow it.
I am supposed to use &lt;a href="https//rvm.io"&gt;rvm&lt;/a&gt; to to manage the ruby versions. So, the stuff I&amp;nbsp;did:&lt;/p&gt;
&lt;p&gt;curl -L https://get.rvm.io |&amp;nbsp;bash&lt;/p&gt;
&lt;p&gt;And wait for it to finish, it might take a while. In my case, I ran into an error about it not being
able to install some of the requirements, so what I did was check the log, and take the stuffs that
failed to install and install them manually via apt-get. Worked for me. After it is done doing its
things, put this somewhere in the startup&amp;nbsp;script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;&lt;span class="caps"&gt;HOME&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rvm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rvm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, install the version of ruby you want to&amp;nbsp;use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;rvm&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="mf"&gt;1.9.3&lt;/span&gt;
&lt;span class="n"&gt;rvm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="mf"&gt;1.9.3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is done. Maybe install some essential&amp;nbsp;gems:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;bundler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;guard&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Node.js&lt;/h1&gt;
&lt;p&gt;I am actually not sure what I am going to do with Node.js, but it is an interesting piece of 
technology with its full-async execution model. So, I just installed it, maybe I&amp;#8217;ll play with
it at sometime. There are many ways to install node.js on a linux system. The official way
is to download and install it from source, but since I am don&amp;#8217;t want to spend too much 
time dealing with something that I am not sure I will use anyway, I installed it from an un-official&amp;nbsp;&lt;span class="caps"&gt;PPA&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt; &lt;span class="n"&gt;ppa&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;chris&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lea&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;nodejs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And that will install &lt;code&gt;npm&lt;/code&gt; as well. kind of like &lt;code&gt;pip&lt;/code&gt; of the node.js world I&amp;nbsp;guess.&lt;/p&gt;
&lt;h1&gt;Others&lt;/h1&gt;
&lt;h2&gt;Mono&lt;/h2&gt;
&lt;p&gt;The open source .&lt;span class="caps"&gt;NET&lt;/span&gt; implementation. Ability to use the awesome C# and&amp;nbsp;MonoGame.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;mono&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;complete&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Android-&lt;span class="caps"&gt;SDK&lt;/span&gt;?&lt;/h2&gt;
&lt;p&gt;I know I am going to need this sooner or later, but dealing with Java isn&amp;#8217;t just my favorite thing
to do. I think the new Android Studio is supposed to make installing the SDKs and Android system
images easier without having to deal with eclipse plugins and stuff, but still, removing OpenJDK,
installing Oracle-&lt;span class="caps"&gt;JDK&lt;/span&gt;, and stuff&amp;#8230; later, I&amp;nbsp;guess.&lt;/p&gt;
&lt;h2&gt;Go?&lt;/h2&gt;
&lt;p&gt;I am not sure if I want to install this. The hype around it has been drawing my attention to&amp;nbsp;it.&lt;/p&gt;</summary><category term="linux"></category><category term="python"></category><category term="ruby"></category><category term="node"></category></entry><entry><title>More fun withÂ Linux</title><link href="http://hndr.me/blog/more-fun-with-linux" rel="alternate"></link><updated>2013-06-11T13:04:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2013-06-11:blog/more-fun-with-linux</id><summary type="html">&lt;h1&gt;Terminal&lt;/h1&gt;
&lt;p&gt;The best feature of a Linux system is its &lt;span class="caps"&gt;CLI&lt;/span&gt; tools, so of course, the terminal is an important
tool to have. My first choice was &lt;a href="http://software.schmorp.de/pkg/rxvt-unicode.html"&gt;urxvt&lt;/a&gt;, it was lightweight, supports unicode, have quite
an active community with various customization with it, and it doesn&amp;#8217;t have a menu bar, which
is perfect for the i3wm I am using. Copy and pasting aren&amp;#8217;t as straightforward as I hoped, as I
need to setup some script to get the basic function working, but I could live with that. The deal
breaker problem is that it for some weird reason produces weird text artifacts when I resizes
the window, which is really important to me, since one of the main the reason I am using a 
tiling window manager is for the flexibility and ability to quickly resize windows using&amp;nbsp;keyboard.&lt;/p&gt;
&lt;p&gt;So, I settled for Terminator. It wasn&amp;#8217;t ideal, it was rather packed with features I don&amp;#8217;t really
need, such as tabs and split windows. I have no need for these features, as I am already using 
a tiling window manager anyway. But at least it works, and it got a bad ass&amp;nbsp;name.&lt;/p&gt;
&lt;p&gt;There isn&amp;#8217;t much of a terminal to customize, so I only set the font type, hid the title bar,
and changed the color scheme. I wrote a &lt;a href="https://github.com/hdra/itermcolors2terminator"&gt;script&lt;/a&gt; to convert iTerm color schemes to the terminator
palettes, since seems like the iTerm users enjoy a great list of color schemes&amp;nbsp;around.&lt;/p&gt;
&lt;h2&gt;Shell&lt;/h2&gt;
&lt;p&gt;To be honest, I don&amp;#8217;t really need to change my shell to anything other than what was provided 
as the default (that is, bash). Its not like I have overgrown bash and need something more
powerful anyway. But, since all the cool people are saying &lt;a href="http://fendrich.se/blog/2012/09/28/no/"&gt;how&lt;/a&gt; &lt;a href="http://mikegrouchy.com/blog/2012/01/zsh-is-your-friend.html"&gt;awesome&lt;/a&gt; it is, so I jumped
 on the &lt;a href="http://www.zsh.org/"&gt;&lt;span class="caps"&gt;ZSH&lt;/span&gt;&lt;/a&gt; bandwagon anyway. And it turns out, it really is cool, among other things,
 one that I enjoy the most is its autocompletion. Just awesome. I was about to dive deeper
and have fun customizing almost every aspects of it, but somewhere along the way, I&amp;nbsp;realized:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/9014788639/" title="its a trap by p.hdra, on Flickr"&gt;&lt;img src="http://farm9.staticflickr.com/8275/9014788639_93815e99c4_o.jpg" width="197" height="256" alt="its a trap"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am about to spend too much time customizing the system again. So, I simply turned to the 
awesome &lt;a href="https://github.com/robbyrussell/oh-my-zsh"&gt;oh-my-zsh&lt;/a&gt; package, the default is more than good enough for me, all I need to
do is to just add a couple of extra lines to the &lt;code&gt;.zshrc&lt;/code&gt; file to set some alias and environment&amp;nbsp;variables.&lt;/p&gt;
&lt;h1&gt;Text&amp;nbsp;Editor&lt;/h1&gt;
&lt;p&gt;The last few times I tried to work in Linux, I never really tried to setup a nice text editor
to use. Big mistake. &lt;span class="caps"&gt;IMO&lt;/span&gt; the text editor is the most important tool in a programmer&amp;#8217;s pocket.
Last time, I settled with something way too simple, such as gedit, or something way too complex
to get to work, vim. No need to say, I never even got any real productivity working in&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;This time, the I have a wonderful text editor that I have been using from Windows. Yep,
&lt;a href="http://www.sublimetext.com/"&gt;Sublime Text 2&lt;/a&gt;. It really is the best text editor I have ever used. The plugins, the
themes and color schemes, and the community around it are simply awesome. Even without
any plugin, it is still a solid text editor, with its command palette, multi-cursor, and
many others. Best thing of all? It is cross-platform, available on all 3 major OSes, not
the Mono or Java kind of cross platform, but a native application all way&amp;nbsp;through.&lt;/p&gt;
&lt;p&gt;Installing it in Linux, it is pretty straightforward, downloading it from the website, 
extracting it, and thats it. For those who are too lazy to go to the website and download the
archive, there is this command that you can&amp;nbsp;use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;
&lt;span class="n"&gt;wget&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//c758482.r82.cf2.rackcdn.com/Sublime Text 2.0.1 x64.tar.bz2&lt;/span&gt;
&lt;span class="n"&gt;tar&lt;/span&gt; &lt;span class="n"&gt;vxjf&lt;/span&gt; &lt;span class="n"&gt;Sublime&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="mf"&gt;2.0.1&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="n"&gt;x64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bz2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is also an unofficial repository maintained by the people at&amp;nbsp;webupd8:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt; &lt;span class="n"&gt;ppa&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;webupd8team&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sublime&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;sublime&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next thing, adding the the executable to path so that it can be easily&amp;nbsp;started:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;ln&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Sublime&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sublime_text&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;subl&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is a problem with the script above though. Running the command on the terminal
will make the shell to wait for the program to exit, making us unable to do anything else
on that terminal. So, to fix that, I made a little script to run it in the background,
independent of the&amp;nbsp;terminal.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;subl &lt;span class="s2"&gt;&amp;quot;$*&amp;quot;&lt;/span&gt; &amp;amp;&amp;gt; /dev/null &amp;amp;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;All I got to do left is to install the packages that I have been using on Windows.
Installing my packages from Windows aren&amp;#8217;t that hard, since I installed my sublime text 
extras from the &lt;a href="http://wbond.net/sublime_packages/package_control"&gt;Package Control&lt;/a&gt;, all of my installed packages are listed in the 
&lt;code&gt;Package Control.sublime-settings&lt;/code&gt;, and the only thing left I need to do was to copy all
my other configurations over, and just modify a little from the hotkey&amp;nbsp;configuration.&lt;/p&gt;
&lt;h1&gt;&lt;span class="caps"&gt;LAMP&lt;/span&gt;&amp;nbsp;Stack&lt;/h1&gt;
&lt;p&gt;I still do a lot of &lt;span class="caps"&gt;PHP&lt;/span&gt; development, however uncool that may be nowadays. From messing around with
WordPress and general web development, I still find &lt;span class="caps"&gt;PHP&lt;/span&gt; irreplaceable. I even intend to
pick up &lt;a href="http://laravel.com/"&gt;Laravel&lt;/a&gt; to see what it can&amp;nbsp;do.&lt;/p&gt;
&lt;p&gt;So, easiest way to do it is of course, the combination of Apache web server, MySQL, and
the &lt;span class="caps"&gt;PHP&lt;/span&gt; stack. On Windows, I have been spoiled with ease of setup that is &lt;a href="http://sourceforge.net/projects/xampp/"&gt;&lt;span class="caps"&gt;XAMPP&lt;/span&gt;&lt;/a&gt;.
Good thing is, it is also available on Linux, but this time, I would like to take the
opportunity to do it differently. I want to the parts manually so that I know how they work together.
Fortunately, it is not that hard to setup on Linux, as most of the packages needed are
readily available on the software&amp;nbsp;repository.&lt;/p&gt;
&lt;p&gt;So, here are the packages needed, first of all, is the Apache web&amp;nbsp;server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;apache2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By now, visiting &lt;code&gt;localhost&lt;/code&gt; on your web browser should give you something to be happy about.
Next thing to install is the&amp;nbsp;MySQL.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When the install is finished, you should get asked to perform the initial setup for the MySQL
server, including setting up the user authentication and stuffs. Now the last piece of the stack
is to install&amp;nbsp;php.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;php5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, for them to work together, there are a couple more packages to be&amp;nbsp;installed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;libapache2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;php5&lt;/span&gt; &lt;span class="n"&gt;libapache2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt; &lt;span class="n"&gt;php5&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt; &lt;span class="n"&gt;phpmyadmin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, restart apache with &lt;code&gt;sudo /etc/init.d/apache2 restart&lt;/code&gt;, and try to put some &lt;span class="caps"&gt;PHP&lt;/span&gt; code in
&lt;code&gt;/var/www&lt;/code&gt; and navigate to the address to see if it executed properly. Also, add this line
to &lt;code&gt;/etc/php5/apache2/php.ini&lt;/code&gt;: &lt;code&gt;extension=mysql.so&lt;/code&gt; to get &lt;span class="caps"&gt;PHP&lt;/span&gt; to work with MySQL. Also,
add the line &lt;code&gt;Include /etc/phpmyadmin/apache.conf&lt;/code&gt; to &lt;code&gt;/etc/apache2/apache2.conf&lt;/code&gt; so that
the server know where to find phpmyadmin. Restart the server again, and the server is set to&amp;nbsp;go.&lt;/p&gt;
&lt;p&gt;Now, the server is ready to use, but there are still a few things to do to make it pleasant to
use. One is the document root of the apache web server is located at the not so easy to access
location of &lt;code&gt;/var/www&lt;/code&gt;, so its better to move that to somewhere inside the home directory.
To do that. the file to edit is &lt;code&gt;/etc/apache2/sites-available/default&lt;/code&gt;. It should be pretty 
obvious which lines to edit once you open that file. Also, while this might not be necessary,
you can create an alias for &lt;code&gt;/etc/init.d/apache2&lt;/code&gt; so that it can be easily&amp;nbsp;accessed.&lt;/p&gt;</summary><category term="linux"></category></entry><entry><title>WordPress isÂ big</title><link href="http://hndr.me/blog/wordpress-is-big" rel="alternate"></link><updated>2013-06-07T11:22:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2013-06-07:blog/wordpress-is-big</id><summary type="html">&lt;p&gt;Well, WordPress is big. Yes, that sounds silly, I know how &lt;a href="http://yoast.com/wordpress-stats/"&gt;big&lt;/a&gt; WordPress is, I just 
never really cared about the opportunity that it provides. I am currently looking for some
freelance work to do, and I was pretty disappointed that most of what I found are WordPress
jobs. Not that there is any problem with that, it was a wonderful blogging software, but
it is a terrible &lt;span class="caps"&gt;CMS&lt;/span&gt;. As it tries to be more of a &lt;span class="caps"&gt;CMS&lt;/span&gt;, a terrible &lt;span class="caps"&gt;API&lt;/span&gt; that is hard to work
with is what we have. That is the reason why I would prefer to write a web app from scratch
rather than bending WordPress to do what I want, it is just too much work, and for some reason
people seems to prefer using WordPress for everything. The other day, I received a request
to write an event management website with WordPress. I am not confident that I can do that, 
since I honestly had a hard time understanding its&amp;nbsp;&lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;When I uploaded my &lt;a href="http://wordpress.org/extend/themes/mog"&gt;Mog&lt;/a&gt; WordPress theme to the wordpress.org theme directory, I didn&amp;#8217;t
have much expectation. It was just a side project that I did for fun, and honestly, it was 
my first try on building a WordPress theme for myself (I was blogging on WordPress.com at
the time). To be honest, it wasn&amp;#8217;t that good of an experience. The &lt;span class="caps"&gt;API&lt;/span&gt; are kind of messy, 
in no small part are caused by having to accommodate a large variety of use cases by its
even larger user base. Somewhere along the way I got fed up and decided to just build the
things that I need. So, I left out custom menus support, ability to customize the theme via
the WordPress option, and I don&amp;#8217;t even style the drop down menu properly, since I wasn&amp;#8217;t 
planning to have any nested&amp;nbsp;menu. &lt;/p&gt;
&lt;p&gt;Then, few days ago, I noticed that the theme has reached 10.000 downloads. I know, that given
WordPress&amp;#8217; scale, that number is nothing. It is nowhere near the number of some &amp;#8220;popular&amp;#8221;
WordPress plugin or theme. Still, it is kind of different knowing that
something that I made was interesting enough that it was downloaded by that many&amp;nbsp;people.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/8975138966/" title="Screenshot (141) by p.hdra, on Flickr"&gt;&lt;img src="https://farm6.staticflickr.com/5345/8975138966_64de8e9581.jpg" width="433" height="500" alt="Screenshot (141)"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I came to think that something that I initially considered good enough for me to use, is
nowhere near good enough for public consumption, so I decided to start working on the 
theme again, and make it better. Starting by fixing some of the problems I mentioned above.
I still hate how messy the WordPress &lt;span class="caps"&gt;API&lt;/span&gt; is, but it also got me thinking, maybe I should
give it a more serious consideration. Even though it is not very likely, I still hope 
that the WordPress team can consider redesigning the &lt;span class="caps"&gt;API&lt;/span&gt;. There are some &lt;a href="http://john.onolan.org/ghost/"&gt;projects&lt;/a&gt; that seems promising, but while I am sure they are all great projects, I don&amp;#8217;t see it can replace
WordPress anytime soon. So, I guess it&amp;#8217;s time to open up the WordPress books&amp;nbsp;again.&lt;/p&gt;</summary><category term="wordpress"></category></entry><entry><title>Setting up my Linux to be lessÂ ugly</title><link href="http://hndr.me/blog/making-my-new-linux-less-ugly" rel="alternate"></link><updated>2013-06-01T14:57:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2013-06-01:blog/making-my-new-linux-less-ugly</id><summary type="html">&lt;p&gt;As I &lt;a href="http://hndr.me/blog/linux-again"&gt;decided&lt;/a&gt; to setup a new Linux installation that is lightweight, customizable to my taste,
can be made look pretty, and of course, usable, I started looking around for the suitable&amp;nbsp;setup.&lt;/p&gt;
&lt;p&gt;First thing I need to decide on is which Linux distribution to use. I can either look for something
bare bone like the Arch, and then build up everything I need, or I can just take something that
is ready to use, like Ubuntu, and take out whatever I don&amp;#8217;t need and replace anything I don&amp;#8217;t like.
I am tempted to take the former approach, but looking at some youtube videos on the stuffs I would
need to do, there seems to be just way too many things to do before I can even do anything. Even 
for basic things like network access needs to be setup. So, well, no thanks. Maybe next&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;I ended up deciding on the distribution I am familiar with, Linux Mint 13 &lt;span class="caps"&gt;XFCE&lt;/span&gt;. Now, even as it is,
the &lt;span class="caps"&gt;XFCE&lt;/span&gt; distribution is lightweight enough for me to use smoothly. It doesn&amp;#8217;t look bad, and it
is very customizable. I was tempted to settle on it, but for some reason, I had frequent crashes
during my use with it. Anyway, it is good enough for me to use as a&amp;nbsp;base. &lt;/p&gt;
&lt;p&gt;I had been read a lot about tiling window manager, and has been wanting to try it out. &lt;a href="http://www.xmonad.org"&gt;XMonad&lt;/a&gt; 
seems to be the one that is mentioned most frequently, but setting it up seems like a pain. Not to 
mention the  &lt;span class="caps"&gt;500MB&lt;/span&gt; I am supposed to download with it. I found another option, &lt;a href="http://www.i3wm.org"&gt;i3&lt;/a&gt;. And it seems 
to be a lot easier to setup and use. The configuration is done with plain text file instead of 
a scripting language like Haskell as is the case with XMonad. People had good things to say
about how easy it is to use as well. Once I saw the video demo, I am&amp;nbsp;sold.&lt;/p&gt;
&lt;iframe width="480" height="360" src="http://www.youtube.com/embed/Wx0eNaGzAZU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;Installing&amp;nbsp;i3&lt;/h2&gt;
&lt;p&gt;Installing i3 is easy enough. It is listed in the Ubuntu package repository, so it is also available
for Linux Mint that is based on Ubuntu, but I find the version available in the repository to be
severely outdated and have some problem with rendering some fonts, so installing the latest 
stable version from i3&amp;#8217;s repository is recommended. The instruction on their download page is easy 
enough to&amp;nbsp;follow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# echo &amp;quot;deb http://debian.sur5r.net/i3/ $(lsb_release -c -s) universe&amp;quot; &amp;gt;&amp;gt; /etc/apt/sources.list&lt;/span&gt;
&lt;span class="c"&gt;# apt-get update&lt;/span&gt;
&lt;span class="c"&gt;# apt-get --allow-unauthenticated install sur5r-keyring&lt;/span&gt;
&lt;span class="c"&gt;# apt-get update&lt;/span&gt;
&lt;span class="c"&gt;# apt-get install i3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One thing to take notice here is the first line, which is used to add the repository to our
sources. Only problem is, the &lt;code&gt;lsb_release -c -s&lt;/code&gt; in my system will output &lt;code&gt;maya&lt;/code&gt;, since that is
indeed what my system is. That will cause the link to return me an 404, since, of course, the 
repository was meant for Ubuntu, and there is not Ubuntu version code named &lt;code&gt;maya&lt;/code&gt;. Since I 
know Linux Mint 13 was build on Ubuntu Precise, I can just replace it with&amp;nbsp;that.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# echo &amp;quot;deb http://debian.sur5r.net/i3/ maya universe&amp;quot; &amp;gt;&amp;gt; /etc/apt/sources.list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After the installation is done, I log out, log in again, this time selecting i3 in the session
manager, and I am&amp;nbsp;in.&lt;/p&gt;
&lt;h2&gt;Making it less&amp;nbsp;ugly&lt;/h2&gt;
&lt;p&gt;Out of the box, i3 looks pretty hideous. I didn&amp;#8217;t take any screenshot because at that point
I haven&amp;#8217;t even figured out how to take a screenshot yet. But it is just a black screen with a 
little black bar at the bottom anyway. In any case, it is time to to do some makeover. The 
documentation for the i3 is really clear and nice to read. So, there wasn&amp;#8217;t much problem to 
figure out what to do. The configuration file is stored at &lt;code&gt;~/.i3/config&lt;/code&gt;. First thing to change
is the color. I don&amp;#8217;t know much about design, but I do know when to avoid using the pure black and
pure white color. Thing #1 to change: the window title&amp;nbsp;color.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;focused&lt;/span&gt;          &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mf"&gt;3F&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;&lt;span class="caps"&gt;AC2&lt;/span&gt;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;096&lt;/span&gt;&lt;span class="n"&gt;&lt;span class="caps"&gt;BAA&lt;/span&gt;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="n"&gt;&lt;span class="caps"&gt;BAA7&lt;/span&gt;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="n"&gt;&lt;span class="caps"&gt;DA8E&lt;/span&gt;&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;focused_inactive&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;333333&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mf"&gt;5F&lt;/span&gt;&lt;span class="mi"&gt;676&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;ffffff&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mf"&gt;484e50&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unfocused&lt;/span&gt;        &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;333333&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;424242&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;888888&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;292&lt;/span&gt;&lt;span class="n"&gt;d2e&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urgent&lt;/span&gt;           &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;C10004&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;900000&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;ffffff&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;900000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, the status bar. I prefer mine on top of the screen. Also, the&amp;nbsp;color.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt;
    &lt;span class="n"&gt;status_command&lt;/span&gt; &lt;span class="n"&gt;i3status&lt;/span&gt;
    &lt;span class="n"&gt;tray_output&lt;/span&gt; &lt;span class="n"&gt;&lt;span class="caps"&gt;LVDS&lt;/span&gt;&lt;/span&gt;
    &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;background&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;232323&lt;/span&gt;
        &lt;span class="n"&gt;statusline&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;&lt;span class="caps"&gt;DCDCDC&lt;/span&gt;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next thing, time to change that 80s font&amp;nbsp;face.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;font&lt;/span&gt; &lt;span class="n"&gt;pango&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Ubuntu&lt;/span&gt; &lt;span class="n"&gt;Mono&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By now, it looks much better. Next is the wallpaper. I use &lt;code&gt;feh&lt;/code&gt; to set my&amp;nbsp;wallpaper.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;exec&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;startup&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="n"&gt;feh&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;bg&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;hdra&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Pictures&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Wallpapers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jpg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is how the &amp;#8216;desktop&amp;#8217; looks like right&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/8910945270/" title="desktop by p.hdra, on Flickr"&gt;&lt;img src="https://farm4.staticflickr.com/3665/8910945270_db72193fae_c.jpg" width="800" height="447" alt="desktop"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Setting up&amp;nbsp;&lt;span class="caps"&gt;GTK&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;By now my desktop doesn&amp;#8217;t look half bad, but if I open any gtk-based application, especially
gtk3 application, it looks like complete crap. So, next thing to deal with is the gtk theme
and icons. The configuration file for gtk2 is located at &lt;code&gt;~/.gtkrc-2.0&lt;/code&gt;, while for gtk3 is located
at &lt;code&gt;~/.config/gtk-3.0/settings.ini&lt;/code&gt;. I want the applications to look consistent, so I had to
look for one that can provide similar looks for both. There are some of the built-in theme that can
do this, but I want something else. I decided on the MediterraneanLight from &lt;a href="http://www.gnome-look.org"&gt;gnome-look&lt;/a&gt;.
I also picked up an icon set from there. Next thing to do is to change the font. I never liked
how fonts in Linux &lt;span class="caps"&gt;OS&lt;/span&gt; are always unnecessarily big. So, I switched to a lower font&amp;nbsp;size.&lt;/p&gt;
&lt;p&gt;Here is my gtk2&amp;nbsp;configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;gtk&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;MediterraneanLight&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;gtk&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Open Sans 8&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;gtk&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Faenza-Dark&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And here is the gtk3&amp;nbsp;configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[Settings]&lt;/span&gt;
&lt;span class="na"&gt;gtk-theme-name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;MediterraneanLight&lt;/span&gt;
&lt;span class="na"&gt;gtk-font-name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;Open Sans 8&lt;/span&gt;
&lt;span class="na"&gt;gtk-fallback-icon-theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;Mint-X&lt;/span&gt;
&lt;span class="na"&gt;gtk-icon-theme-name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;Faenza-Dark&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And now here is how it looks&amp;nbsp;like:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/8910222885/" title="marlin by p.hdra, on Flickr"&gt;&lt;img src="https://farm6.staticflickr.com/5459/8910222885_22f206f546_c.jpg" width="800" height="450" alt="marlin"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here is some more screenshots with the tiling in&amp;nbsp;action:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/8901017483/" title="capt-2013-05-30-114812 by p.hdra, on Flickr"&gt;&lt;img src="https://farm6.staticflickr.com/5444/8901017483_1e29ac330a_c.jpg" width="800" height="450" alt="capt-2013-05-30-114812"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/8901630850/" title="capt-2013-05-31-193656 by p.hdra, on Flickr"&gt;&lt;img src="https://farm4.staticflickr.com/3724/8901630850_57c45b5fd2_c.jpg" width="800" height="450" alt="capt-2013-05-31-193656"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Next is on setting it up to be more&amp;nbsp;usable!&lt;/p&gt;</summary></entry><entry><title>Setting up my Linux on my laptop, changing myÂ approach</title><link href="http://hndr.me/blog/linux-again" rel="alternate"></link><updated>2013-05-29T20:57:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2013-05-29:blog/linux-again</id><summary type="html">&lt;p&gt;I tried again and again to setup a Linux &lt;span class="caps"&gt;OS&lt;/span&gt; on my laptop, hoping to eventually making it my 
main operating system, but, again and again, I find it just not practical enough. There was 
always something that doesn&amp;#8217;t work correctly. Things like programs that kept crashing, windows 
that suddenly froze, drivers not working, or simply, everything being sluggish. All that time, I 
always kept thinking that Linux on desktop is good enough to be used the same way I use Windows, 
or maybe, &lt;span class="caps"&gt;OSX&lt;/span&gt;. I was wrong. So, why am I doing this again this time? Well, for one thing, final
exams are coming, and I should be studying instead of messing with my computer, so yeah, that 
dreadful &amp;#8216;P&amp;#8217; word. But, other than that, I also want to try a different approach this&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;The usual pitch with Linux on desktop is that they are no longer hard to use as they used to. 
They require less resources to run. They can be made whatever you want them to. Truth: the ones 
that are user friendly are nowhere near lightweight, and many of them aren&amp;#8217;t even that configurable
by design, in the name of user friendliness. I do believe that overall, they are all moving to
the right direction. Especially the work Linux Mint team done with &lt;a href="http://cinnamon.linuxmint.com"&gt;Cinnamon&lt;/a&gt; has been very
exciting. Canonical has also been hard at work with Ubuntu, coming up with all kinds of stuff that
makes Linux more and more viable as a desktop &lt;span class="caps"&gt;OS&lt;/span&gt;. They even plan to develop &lt;a href="http://www.omgubuntu.co.uk/2013/03/canonical-announce-custom-display-server-mir-not-wayland-not-x"&gt;their own display server&lt;/a&gt;.
The trends are going towards an &lt;span class="caps"&gt;OS&lt;/span&gt; that is tightly integrated, better hardware support, and of 
course, easier to use. Customizability might be the only thing that are going away. I personally
don&amp;#8217;t really care for it, as long as they work well enough for me, I wouldn&amp;#8217;t really need to
configure much&amp;nbsp;anyway.&lt;/p&gt;
&lt;p&gt;Seems like easy enough for me to just pick a distribution and use it. Too bad, it is not that simple
for me. Here are some of my problem with the existing &amp;#8216;mainstream linux&amp;#8217;:
&lt;em&gt; I mentioned that the ability to configure the &lt;span class="caps"&gt;OS&lt;/span&gt; doesn&amp;#8217;t matter that much to me, as long as it 
works well enough. Problem is, none of them are good enough, so my only option is to use one
that I can customize to suit my use.
&lt;/em&gt; My laptop is almost 4 years old. It runs Windows 8 smoothly. It can even run some of the recent 
heavyweight games with no problem. But, surprisingly,  believe it or not, running vanilla Ubuntu
with Unity doesn&amp;#8217;t come without noticeable lags. I believe the hardware drivers play quite a part
in this. Looking around, seems like most people seems pretty happy with the open source graphic card
driver, so I guess its time for me to upgrade, but, I am still saving up.
* Related to my first point, in my attempt trying to bend the &lt;span class="caps"&gt;OS&lt;/span&gt; to suit my taste, many things
became a tangled mess. This makes unexpected things to stop working during unexpected times. Since
many of the distribution tried to make things easy to use, many things became hidden away. This 
also makes it hard to reproduce the configuration because I am not even sure what I&amp;nbsp;changed.&lt;/p&gt;
&lt;p&gt;So, with all that in mind, I decided how I want this attempt on using Linux would be:
&lt;em&gt; Lightweight. A must. I don&amp;#8217;t think I can use an &lt;span class="caps"&gt;OS&lt;/span&gt; that aren&amp;#8217;t at least as fast as Windows.
&lt;/em&gt; Customizable. I think I was looking for the wrong thing if I focus on ease of use when trying
out Linux out of the box. For now. This time, I would look for something that may requires some 
configuration overhead, but overall, would make everything easier to use.
&lt;em&gt; Works. Of course, By this I mean I don&amp;#8217;t want having to install codecs to play music, or not 
audio jack not working, having to dig for drivers for wireless card, multi-monitor configuration, etc.
&lt;/em&gt; Doesn&amp;#8217;t hide things from me. I want to know what is going on in as many places as possible.
As little magic as possible. I want to be able to reproduce my configuration easily.
&lt;em&gt; Makes me more productive. The whole point of me thinking to switch to Linux is so that I can
do things, especially programming related things, faster, easier, and better. I want to take
full advantage of &lt;span class="caps"&gt;UNIX&lt;/span&gt;. I want to use as many keyboard shortcuts as possible. I don&amp;#8217;t expect this
to be there out of the box, but I want it to be at least configurable to achieve this.
&lt;/em&gt; Looks good. I don&amp;#8217;t need shiny and fancy, but at the very least, I don&amp;#8217;t want it to be unbearably&amp;nbsp;ugly.&lt;/p&gt;
&lt;p&gt;Of course, I can&amp;#8217;t simply blame everything on the &lt;span class="caps"&gt;OS&lt;/span&gt;. There are also mistakes in the way I 
approached this in the past. I just expected everything to work without making an effort to know
what is happening behind the scene. So, this time, here is how I am going to do it.
&lt;em&gt; No configuration tool such as ubuntu-tweak and such. If there is a file that I need to edit,
I want to know what it is, and how to change it.
&lt;/em&gt; Read the &lt;code&gt;man&lt;/code&gt;. I always avoided having to read the help page of most tools, as I preferred to
just have the command to enter presented to me via the great wisdom of Google.
&lt;em&gt; Take it slow. No need to rush to make the &lt;span class="caps"&gt;OS&lt;/span&gt; for me to use. Making sure things work properly 
is the priority.
&lt;/em&gt; Document everything. I want to know the steps I took to achieve something, and I want to make 
sure it can be easily reproduced. Maybe write a build script for&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;All that covered, I have some plan in mind on how to do it. Lightweight, customizable, reasonably
low-level, stable, friendly. Next will be on setting it up. By the way, while I was writing this 
post, Linux Mint 15 &amp;#8220;Olivia&amp;#8221; was announced! and look at &lt;a href="http://www.linuxmint.com/rel_olivia_whatsnew.php"&gt;them&lt;/a&gt;! So pretty! This can be
harder than I expected with that kind of&amp;nbsp;temptation.&lt;/p&gt;</summary></entry><entry><title>My First GitHub PullÂ Request!</title><link href="http://hndr.me/blog/my-first-github-pull-request" rel="alternate"></link><updated>2013-04-28T11:44:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2013-04-28:blog/my-first-github-pull-request</id><summary type="html">&lt;p&gt;I just had my first pull request! It was a change to the &lt;a href="https://github.com/getpelican/pelican-themes"&gt;Pelican themes&lt;/a&gt;, where I added
this &lt;a href="https://github.com/hdra/pelican-cait"&gt;theme&lt;/a&gt; to the directory there. So, yeah, I didn&amp;#8217;t actually contribute a patch to an
existing project, it was simply adding my repo to the list of&amp;nbsp;theme.&lt;/p&gt;
&lt;p&gt;I also learned about the whole pull request process itself. Of course, it is not
that complicated in the first place anyway. Basically it involves forking the source repo,
create a new branch, make changes on that branch, commit, push to github, and then after the new
branch is created on github, there will be an option to initiate a pull request there. It is that&amp;nbsp;simple.&lt;/p&gt;
&lt;p&gt;I actually drafted this post around a week ago when I sent the pull request, and it just got merged
to the master branch earlier today, so here I am updating this&amp;nbsp;thing.&lt;/p&gt;
&lt;p&gt;But, anyway, I got to say, it feels pretty good! and it is also quite a motivation booster for me.&amp;nbsp;:D&lt;/p&gt;</summary><category term="programming"></category></entry><entry><title>Setting up my GitHubÂ Pages</title><link href="http://hndr.me/blog/setting-up-my-github-pages" rel="alternate"></link><updated>2013-04-26T16:50:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2013-04-26:blog/setting-up-my-github-pages</id><summary type="html">&lt;p&gt;Previously, I had been hosting this site from Heroku. It was pretty simple to setup, I can just
create an &lt;code&gt;index.php&lt;/code&gt; file, then add another &lt;code&gt;.htaccess&lt;/code&gt; file to the root of the site, push, and done.
In this case, I maintained two separate repositories, one that contains the Pelican project, including
the configuration file, the build script, etc. The other repositories contains the generated &lt;span class="caps"&gt;HTML&lt;/span&gt;&amp;nbsp;files.&lt;/p&gt;
&lt;p&gt;Now, I recently wanted to try hosting the site on GitHub Pages. Hosting on GitHub pages requires
the content of my site to be in the root of &lt;code&gt;gh-pages&lt;/code&gt; branch. Of course, this would be simple enough
if I just keep the project files and the generated &lt;span class="caps"&gt;HTML&lt;/span&gt; files in separate repositories just like I
did before, but I would like to keep them in the same repository, and have a build script to do
everything for&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;Turns out, it is not that simple to achieve that. The most straightforward way to do this is to 
 create or checkout the &lt;code&gt;gh-pages&lt;/code&gt; branch, generate the &lt;span class="caps"&gt;HTML&lt;/span&gt; files on the same directory, commit, 
and push as usual. But this would make the &lt;code&gt;gh-pages&lt;/code&gt; branch contains some of the project files. 
Not a big problem, but it just doesn&amp;#8217;t feel too clean of a solution. I also tried other methods,
but none of them feels satisfactory. Ideally, I wanted to have a solution similar what was done
with &lt;a href="https://github.com/davisp/ghp-import"&gt;ghp-import&lt;/a&gt;, but there are some problems that prevents me from using it. I tried looking 
at the source of the project, in attempting to understand how it works and try to do the same things
manually, but well, it seems like my Git-fu are insufficient to understand it. In the end, ended up 
doing the things similar as what outlined &lt;a href="https://gist.github.com/chrisjacob/833223"&gt;here&lt;/a&gt;. Basially, I am keeping the branches of the 
same repository in separate directories, but instead of keeping the as a siblings, 
I made the &lt;code&gt;gh-pages&lt;/code&gt; branch as a child of the child directory of the project. Here is the fabric 
file I used to build the&amp;nbsp;post:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;configurations&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;conf&lt;/span&gt;


&lt;span class="n"&gt;output_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OUTPUT_PATH&lt;/span&gt;
&lt;span class="n"&gt;remote_git&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;git@github.com:hdra/hndr.me.git&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;activate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;env&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;Scripts&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;activate.bat&amp;#39;&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mkdir {0}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_dir&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;lcd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_dir&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;git clone -b gh-pages {0} .&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remote_git&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;commit_msg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;update&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;git add -A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;git commit -m &amp;quot;{0}&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;commit_msg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;git push origin master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;git push bitbucket master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;commit_msg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Post update&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# Update master branch&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;git add -A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;git commit -m &amp;quot;{0}&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;commit_msg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;git push origin master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;git push bitbucket master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# Generate posts&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pelican -s configurations.py -v&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# Update gh-pages branch&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;lcd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;output&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;git add -A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;git commit -m &amp;quot;{0}&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;commit_msg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;git push origin gh-pages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That seems to work pretty cleanly so far. One problem is when creating a new project and its &lt;code&gt;gh-pages&lt;/code&gt;
branch for the first time. In my case, I dealt with it by creating the a new branch as usual,
and then deleting the project files in the &lt;code&gt;gh-pages&lt;/code&gt; branch manually, but I think it can be done by
creating an orphan page with the &lt;code&gt;git checkout --orphan gh-pages&lt;/code&gt; command as well. Anyway, this 
needs to be done only once, so it shouldn&amp;#8217;t be too much of a&amp;nbsp;problem.&lt;/p&gt;</summary><category term="programming"></category></entry><entry><title>New SiteÂ Design!</title><link href="http://hndr.me/blog/new-site-design" rel="alternate"></link><updated>2013-04-13T19:33:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2013-04-13:blog/new-site-design</id><summary type="html">&lt;p&gt;I finally got to converting the last site design I made to a Pelican theme. The &lt;a href="https://github.com/hdra/pelican-cait"&gt;theme&lt;/a&gt; should
be in use by the time this post is published. In its current state, I wouldn&amp;#8217;t say the theme is 
compeletely finished. I tried to make it responsive to screen size changes, but during my
testing, I found some problem viewing it in iOS Safari when there is a long line of continuos text
in the page. For some reason &lt;code&gt;overflow-wrap: break-word;&lt;/code&gt; doesn&amp;#8217;t seem to work in it, even though
it works fine in Chrome and Firefox for&amp;nbsp;Android.&lt;/p&gt;
&lt;p&gt;That aside, the are also a lot of repetition and duplicate codes in the &lt;span class="caps"&gt;CSS&lt;/span&gt; and Jinja2 template.
The templates in particular aren&amp;#8217;t very flexible. There are a number of values that needs to be
specified in the configuration file for it to be usable. Pages also can&amp;#8217;t be listed 
the normal way since I turned one of the page template into the index page for my&amp;nbsp;site.&lt;/p&gt;
&lt;p&gt;All that said, I think it is ready to be put out there. If I sit on it any longer, I am pretty sure
I would lose interest in it pretty soon. As they say, &lt;a href="http://www.codinghorror.com/blog/2009/12/version-1-sucks-but-ship-it-anyway.html"&gt;ship early, ship often&lt;/a&gt;. Maybe this
shouldn&amp;#8217;t even be a version 1, but it is a&amp;nbsp;start.&lt;/p&gt;</summary><category term="personal"></category></entry><entry><title>Made another design for theÂ blog</title><link href="http://hndr.me/blog/made-another-design-for-the-blog" rel="alternate"></link><updated>2013-04-10T09:02:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2013-04-10:blog/made-another-design-for-the-blog</id><summary type="html">&lt;p&gt;Recently I have been spending my time messing around with website front-end development.
Probably because of I have been trying to write a Pelican theme for my own website. For My own 
use, I wanted the website to have a landing page, and also another design for the blog index. 
I made another attempt at the design recently. Here is the landing&amp;nbsp;page:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/8636534196/" title="Screenshot (69) by p.hdra, on Flickr"&gt;&lt;img src="http://farm9.staticflickr.com/8254/8636534196_ac410cec50_c.jpg" width="800" height="414" alt="Screenshot (69)"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;and here is the blog&amp;nbsp;index:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/8636534164/" title="Screenshot (70) by p.hdra, on Flickr"&gt;&lt;img src="http://farm9.staticflickr.com/8519/8636534164_497989410e_c.jpg" width="800" height="415" alt="Screenshot (70)"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I also managed to made the design responsive. Kind of. I just made the sidebar go to the top
of the page when the window is resized to below 800 pixels of&amp;nbsp;width. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/8635873575/" title="Snap 2013-04-10 at 12.49.21 by p.hdra, on Flickr"&gt;&lt;img src="http://farm9.staticflickr.com/8248/8635873575_153dd6e05e_b.jpg" width="317" height="1024" alt="Snap 2013-04-10 at 12.49.21"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The design itself is currently still a static &lt;span class="caps"&gt;HTML&lt;/span&gt; page that I made on top of the pretty
cool &lt;a href="http://html5boilerplate.com/"&gt;&lt;span class="caps"&gt;HTML5&lt;/span&gt; Bootstrap&lt;/a&gt;. For some reason I got a feeling that I am not using it to its full 
potential, as I don&amp;#8217;t really utilizes anything from it beyond the basic page structure and the 
included &lt;code&gt;normalize.css&lt;/code&gt;. Obviously I am doing something wrong. One thing that I notice in the 
main &lt;span class="caps"&gt;CSS&lt;/span&gt; file is this&amp;nbsp;line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="nt"&gt;only&lt;/span&gt; &lt;span class="nt"&gt;screen&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;min-width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;35em&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I knew about the media query and used it before, but I used to use it with the &lt;code&gt;max-width&lt;/code&gt; instead.
So, the idea here is to design for the mobile version first, then make the necessary changes for
the larger screen. I have heard about this mobile-first approach a lot before, and I am aware 
of the arguements for and against it, but I never really
gave it any thought, mostly because I am not doing any serious front-end stuff anyway, but I am 
thinking of trying this approach for my next try on web&amp;nbsp;design. &lt;/p&gt;
&lt;p&gt;I am also planning to play around more with front-end development. The past few days trying to make
the &lt;span class="caps"&gt;HTML&lt;/span&gt; page to look exactly how I want it to look like made me realize that I don&amp;#8217;t really know much 
about front-end development. Most of the time, web-development for me consists of dealing with generating
&lt;span class="caps"&gt;HTML&lt;/span&gt; page from the server and maybe make a Javascript function to make a server call to change the 
page dynamically, but I never really go deep into &lt;span class="caps"&gt;HTML&lt;/span&gt; and &lt;span class="caps"&gt;CSS&lt;/span&gt; itself. Looking into more than
tools and frameworks that I can use to make the job&amp;nbsp;easier.&lt;/p&gt;
&lt;p&gt;Anyway, as mentioned before, the designs above are still in a static &lt;span class="caps"&gt;HTML&lt;/span&gt; form, and I think it 
is good enough for me to use. Maybe I&amp;#8217;ll turn it into a proper Pelican theme&amp;nbsp;soon.&lt;/p&gt;</summary><category term="programming"></category><category term="design"></category></entry><entry><title>StillÂ Working</title><link href="http://hndr.me/blog/still-working" rel="alternate"></link><updated>2013-04-03T17:16:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2013-04-03:blog/still-working</id><summary type="html">&lt;p&gt;It has been a few weeks since I decided to start blogging again, but well, as usual not
much has been done on it.
For starter, I initially planned to host it on Heroku, following the tricks outline &lt;a href="http://kennethreitz.org/exposures/static-sites-on-heroku-cedar"&gt;here&lt;/a&gt;,
and it is super simple to setup. I had created a new Heroku app, generated the blog, and pushed
the generated content to Heroku in just a few minutes. In another minute, and I had setup the
custom domain and had everything working&amp;nbsp;nicely. &lt;/p&gt;
&lt;p&gt;Problem is, even though the site itself is just a bunch of static files, the first time I visited 
the site, it took a few seconds to load the content, but when I visit it again for the second time, 
it served the site almost immediately. At first, I thought it was because of the site is cached by 
the browser, so it loads much quicker, but even when I cleared the browser cache, it still loads the
same way. After a bit of googling, I &lt;a href="https://devcenter.heroku.com/articles/dynos"&gt;found&lt;/a&gt; out that Heroku will turn off the dyno after an 
hour of inactivity, so everytime I visit the site after a period of idling, the dyno will need to 
be started again at that time. Not much of a problem, considering I am not even paying for the 
amazing service that Heroku provide, and there &lt;a href="http://stackoverflow.com/questions/5480337/easy-way-to-prevent-heroku-idling"&gt;ways&lt;/a&gt; to get around it anyway. I probably won&amp;#8217;t 
be using it, since I am still playing around with the hosting options around&amp;nbsp;anyway.&lt;/p&gt;
&lt;p&gt;Other popular service that people use to host their static site seems to be &lt;a href="http://pages.github.com/"&gt;Github Pages&lt;/a&gt;. After
looking around on how to set it up, seems like it is pretty easy to set it up. The Pelican makefile
even includes a build option for this setup. The site will be hosted in a repository just like any
other git repo, but the site index will need to be on the &lt;code&gt;gh-pages&lt;/code&gt; branch. In other words, the 
content of the site will be open source. Not a problem though, since any webpage that are publicly
accessible are basically open source anyway. Maybe I&amp;#8217;ll move the site here after I am done setting
the website&amp;nbsp;itself.&lt;/p&gt;
&lt;p&gt;On building the site itself, I just converted some of my old wordpress posts to Markdown, which 
should be published along with this post. The automatic converter doesn&amp;#8217;t work too well, since many 
of posts contains some really badly formed markups, so I ended up manually converting the most of 
posts. I also took the chance to just remove many of the rants/silly posts, not saying that there 
aren&amp;#8217;t any silly posts left&amp;nbsp;anyway.&lt;/p&gt;
&lt;p&gt;I am still playing around with the pelican configurations and options, on how to setup different
static pages, building a theme, etc. Speaking about the theme, I drafted a theme of my&amp;nbsp;own.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/hendra2392/8615163439/" title="Snap 2013-04-01 at 11.50.50 by p.hdra, on Flickr"&gt;&lt;img src="http://farm9.staticflickr.com/8394/8615163439_30ea63f405_c.jpg" width="800" height="788" alt="Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Initially I liked it quite a bit, but after leaving it there for a few days, when I came back to 
work on it again, I found it to be not very attractive anymore. So, no need to say, I scrapped it,
and started working from scratch. This time, planning the overall sites, starting from the landing 
page, static pages, comments, and of course the blog itself. Of course, it won&amp;#8217;t be around anytime
soon. For the time being, the default Pelican theme seems more than good enough for&amp;nbsp;me.&lt;/p&gt;</summary><category term="personal"></category></entry><entry><title>Hello,Â Pelican</title><link href="http://hndr.me/blog/hello_pelican" rel="alternate"></link><updated>2013-03-15T13:19:00+08:00</updated><author><name>Hendra</name></author><id>tag:hndr.me,2013-03-15:blog/hello_pelican</id><summary type="html">&lt;p&gt;Well, it has been a while since I posted anything or do anything with my website for that matter.
I think I haven&amp;#8217;t posted anything since I moved to wordpress.com, but well, its time to start playing&amp;nbsp;again.&lt;/p&gt;
&lt;p&gt;So, again, I moved almost everything. Hosting, domain, and also the blogging platform. I have been wanting to try out some of the static site generator for a while now. The most popular one seems to be &lt;a href="https://github.com/mojombo/jekyll"&gt;Jekyll&lt;/a&gt;. It is built on Ruby, and seems like a lot of people are using it. 
Problem is, it is kind of a pain to setup on Windows, and I wanted to be able to built things for it, or at least my own theme for my blog, and my knowledge of Ruby doesn&amp;#8217;t go too far beyond the Hello World. So I continued my search, this time, specifically looking for a static site generator built on something that I can program in, maybe it is C#, Javascript, &lt;span class="caps"&gt;PHP&lt;/span&gt;, or of course&amp;nbsp;Python.&lt;/p&gt;
&lt;p&gt;And indeed I found quite a lot of awesome projects for Python. The most famous one seems to be &lt;a href="https://github.com/hyde/hyde"&gt;Hyde&lt;/a&gt;. One problem though, the documentation seems to be severely lacking. I went through the website for almost an hour, and I barely have any idea on how to use and customize it. 
Maybe I&amp;#8217;ll take another look at it when my Python skills have&amp;nbsp;improved.&lt;/p&gt;
&lt;p&gt;Then, I found &lt;a href="http:///www.github.com/getpelican"&gt;Pelican&lt;/a&gt;. It is also written in Python, and it&amp;#8217;s &lt;a href="http://docs.getpelican.com"&gt;documentation&lt;/a&gt; is just delightful. It shows you how to get started easily, and also how to customized it as needed. Simply awesome. It is also super easy to setup. There is also a Make configuration file that can be used to automate a bunch of stuffs, but the basic commands are easy enough to use. There is a also a script to import data from other blogging platforms, which maybe I&amp;#8217;ll take a look at&amp;nbsp;later.&lt;/p&gt;</summary></entry></feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>hndr.me</title><link href="http://hdra.github.io/hndr.me/" rel="alternate"></link><link href="http://hdra.github.io/hndr.me/feeds%5Call.atom.xml" rel="self"></link><id>http://hdra.github.io/hndr.me/</id><updated>2013-04-13T19:33:00+08:00</updated><entry><title>New Site Design!</title><link href="http://hdra.github.io/hndr.me/blog/new-site-design" rel="alternate"></link><updated>2013-04-13T19:33:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2013-04-13:blog/new-site-design</id><summary type="html">&lt;p&gt;I finally got to converting the last site design I made to a Pelican theme. The &lt;a href="https://github.com/hdra/pelican-cait"&gt;theme&lt;/a&gt; should
be in use by the time this post is published. In its current state, I wouldn't say the theme is 
compeletely finished. I tried to make it responsive to screen size changes, but during my
testing, I found some problem viewing it in iOS Safari when there is a long line of continuos text
in the page. For some reason &lt;code&gt;overflow-wrap: break-word;&lt;/code&gt; doesn't seem to work in it, even though
it works fine in Chrome and Firefox for Android.&lt;/p&gt;
&lt;p&gt;That aside, the are also a lot of repetition and duplicate codes in the CSS and Jinja2 template.
The templates in particular aren't very flexible. There are a number of values that needs to be
specified in the configuration file for it to be usable. Pages also can't be listed 
the normal way since I turned one of the page template into the index page for my site.&lt;/p&gt;
&lt;p&gt;All that said, I think it is ready to be put out there. If I sit on it any longer, I am pretty sure
I would lose interest in it pretty soon. As they say, &lt;a href="http://www.codinghorror.com/blog/2009/12/version-1-sucks-but-ship-it-anyway.html"&gt;ship early, ship often&lt;/a&gt;. Maybe this
shouldn't even be a version 1, but it is a start.&lt;/p&gt;</summary><category term="personal"></category></entry><entry><title>Made another design for the blog</title><link href="http://hdra.github.io/hndr.me/blog/made-another-design-for-the-blog" rel="alternate"></link><updated>2013-04-10T09:02:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2013-04-10:blog/made-another-design-for-the-blog</id><summary type="html">&lt;p&gt;Recently I have been spending my time messing around with website front-end development.
Probably because of I have been trying to write a Pelican theme for my own website. For My own 
use, I wanted the website to have a landing page, and also another design for the blog index. 
I made another attempt at the design recently. Here is the landing page:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Landing page design" src="http://farm9.staticflickr.com/8254/8636534196_ac410cec50.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;and here is the blog index:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Blog index page design" src="http://farm9.staticflickr.com/8519/8636534164_497989410e.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;I also managed to made the design responsive. Kind of. I just made the sidebar go to the top
of the page when the window is resized to below 800 pixels of width. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Blog index version 2" src="https://farm9.staticflickr.com/8248/8635873575_153dd6e05e.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;The design itself is currently still a static HTML page that I made on top of the pretty
cool &lt;a href="http://html5boilerplate.com/"&gt;HTML5 Bootstrap&lt;/a&gt;. For some reason I got a feeling that I am not using it to its full 
potential, as I don't really utilizes anything from it beyond the basic page structure and the 
included &lt;code&gt;normalize.css&lt;/code&gt;. Obviously I am doing something wrong. One thing that I notice in the 
main CSS file is this line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="nt"&gt;only&lt;/span&gt; &lt;span class="nt"&gt;screen&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;min-width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;35em&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I knew about the media query and used it before, but I used to use it with the &lt;code&gt;max-width&lt;/code&gt; instead.
So, the idea here is to design for the mobile version first, then make the necessary changes for
the larger screen. I have heard about this mobile-first approach a lot before, and I am aware 
of the arguements for and against it, but I never really
gave it any thought, mostly because I am not doing any serious front-end stuff anyway, but I am 
thinking of trying this approach for my next try on web design. &lt;/p&gt;
&lt;p&gt;I am also planning to play around more with front-end development. The past few days trying to make
the HTML page to look exactly how I want it to look like made me realize that I don't really know much 
about front-end development. Most of the time, web-development for me consists of dealing with generating
HTML page from the server and maybe make a Javascript function to make a server call to change the 
page dynamically, but I never really go deep into HTML and CSS itself. Looking into more than
tools and frameworks that I can use to make the job easier.&lt;/p&gt;
&lt;p&gt;Anyway, as mentioned before, the designs above are still in a static HTML form, and I think it 
is good enough for me to use. Maybe I'll turn it into a proper Pelican theme soon.&lt;/p&gt;</summary><category term="programming"></category><category term="design"></category></entry><entry><title>Still Working</title><link href="http://hdra.github.io/hndr.me/blog/still-working" rel="alternate"></link><updated>2013-04-03T17:16:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2013-04-03:blog/still-working</id><summary type="html">&lt;p&gt;It has been a few weeks since I decided to start blogging again, but well, as usual not
much has been done on it.
For starter, I initially planned to host it on Heroku, following the tricks outline &lt;a href="http://kennethreitz.org/exposures/static-sites-on-heroku-cedar"&gt;here&lt;/a&gt;,
and it is super simple to setup. I had created a new Heroku app, generated the blog, and pushed
the generated content to Heroku in just a few minutes. In another minute, and I had setup the
custom domain and had everything working nicely. &lt;/p&gt;
&lt;p&gt;Problem is, even though the site itself is just a bunch of static files, the first time I visited 
the site, it took a few seconds to load the content, but when I visit it again for the second time, 
it served the site almost immediately. At first, I thought it was because of the site is cached by 
the browser, so it loads much quicker, but even when I cleared the browser cache, it still loads the
same way. After a bit of googling, I &lt;a href="https://devcenter.heroku.com/articles/dynos"&gt;found&lt;/a&gt; out that Heroku will turn off the dyno after an 
hour of inactivity, so everytime I visit the site after a period of idling, the dyno will need to 
be started again at that time. Not much of a problem, considering I am not even paying for the 
amazing service that Heroku provide, and there &lt;a href="http://stackoverflow.com/questions/5480337/easy-way-to-prevent-heroku-idling"&gt;ways&lt;/a&gt; to get around it anyway. I probably won't 
be using it, since I am still playing around with the hosting options around anyway.&lt;/p&gt;
&lt;p&gt;Other popular service that people use to host their static site seems to be &lt;a href="http://pages.github.com/"&gt;Github Pages&lt;/a&gt;. After
looking around on how to set it up, seems like it is pretty easy to set it up. The Pelican makefile
even includes a build option for this setup. The site will be hosted in a repository just like any
other git repo, but the site index will need to be on the &lt;code&gt;gh-pages&lt;/code&gt; branch. In other words, the 
content of the site will be open source. Not a problem though, since any webpage that are publicly
accessible are basically open source anyway. Maybe I'll move the site here after I am done setting
the website itself.&lt;/p&gt;
&lt;p&gt;On building the site itself, I just converted some of my old wordpress posts to Markdown, which 
should be published along with this post. The automatic converter doesn't work too well, since many 
of posts contains some really badly formed markups, so I ended up manually converting the most of 
posts. I also took the chance to just remove many of the rants/silly posts, not saying that there 
aren't any silly posts left anyway.&lt;/p&gt;
&lt;p&gt;I am still playing around with the pelican configurations and options, on how to setup different
static pages, building a theme, etc. Speaking about the theme, I drafted a theme of my own.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot of the WIP theme" src="http://farm9.staticflickr.com/8394/8615163439_30ea63f405.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Initially I liked it quite a bit, but after leaving it there for a few days, when I came back to 
work on it again, I found it to be not very attractive anymore. So, no need to say, I scrapped it,
and started working from scratch. This time, planning the overall sites, starting from the landing 
page, static pages, comments, and of course the blog itself. Of course, it won't be around anytime
soon. For the time being, the default Pelican theme seems more than good enough for me.&lt;/p&gt;</summary><category term="personal"></category></entry><entry><title>Hello, Pelican</title><link href="http://hdra.github.io/hndr.me/blog/hello_pelican" rel="alternate"></link><updated>2013-03-15T13:19:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2013-03-15:blog/hello_pelican</id><summary type="html">&lt;p&gt;Well, it has been a while since I posted anything or do anything with my website for that matter.
I think I haven't posted anything since I moved to wordpress.com, but well, its time to start playing again.&lt;/p&gt;
&lt;p&gt;So, again, I moved almost everything. Hosting, domain, and also the blogging platform. I have been wanting to try out some of the static site generator for a while now. The most popular one seems to be &lt;a href="https://github.com/mojombo/jekyll"&gt;Jekyll&lt;/a&gt;. It is built on Ruby, and seems like a lot of people are using it. 
Problem is, it is kind of a pain to setup on Windows, and I wanted to be able to built things for it, or at least my own theme for my blog, and my knowledge of Ruby doesn't go too far beyond the Hello World. So I continued my search, this time, specifically looking for a static site generator built on something that I can program in, maybe it is C#, Javascript, PHP, or of course Python.&lt;/p&gt;
&lt;p&gt;And indeed I found quite a lot of awesome projects for Python. The most famous one seems to be &lt;a href="https://github.com/hyde/hyde"&gt;Hyde&lt;/a&gt;. One problem though, the documentation seems to be severely lacking. I went through the website for almost an hour, and I barely have any idea on how to use and customize it. 
Maybe I'll take another look at it when my Python skills have improved.&lt;/p&gt;
&lt;p&gt;Then, I found &lt;a href="http:///www.github.com/getpelican"&gt;Pelican&lt;/a&gt;. It is also written in Python, and it's &lt;a href="http://docs.getpelican.com"&gt;documentation&lt;/a&gt; is just delightful. It shows you how to get started easily, and also how to customized it as needed. Simply awesome. It is also super easy to setup. There is also a Make configuration file that can be used to automate a bunch of stuffs, but the basic commands are easy enough to use. There is a also a script to import data from other blogging platforms, which maybe I'll take a look at later.&lt;/p&gt;</summary></entry><entry><title>Some XAML syntax to remember</title><link href="http://hdra.github.io/hndr.me/blog/some-xaml-syntax-to-remember" rel="alternate"></link><updated>2012-08-14T14:17:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2012-08-14:blog/some-xaml-syntax-to-remember</id><summary type="html">&lt;p&gt;After developing for WPF/ Silverlight for a while, most people will be
familiar with using XAML to declare UI elements, but even though I have
been comfortable with XAML for quite a while, I don’t really know what
is going on behind the stage. Reading Programming Windows by Charles
Petzold shed some lights on it for me, so this post is here again so
that I won’t forget.&lt;/p&gt;
&lt;p&gt;One important thing I didn't know before is that XAML file more or less is just
another way to express the C# code, and the XAML elements in it are
actually .NET objects, and anything that can be declared in XAML can be
done in C# as well. Most page consists of two files, a &lt;code&gt;.xaml&lt;/code&gt; file and a
&lt;code&gt;.xaml.cs&lt;/code&gt; file, as the partial keyword in the C# file suggest, the
&lt;code&gt;.xaml.cs&lt;/code&gt; file only consist a part of the class declaration. As we can
guess, the rest are declared in the XAML file. If we look at the
&lt;code&gt;obj/Debug&lt;/code&gt; folder of the Project, we can see there are several files with
the name of &lt;code&gt;PageName.g.cs&lt;/code&gt; and &lt;code&gt;PageName.g.i.cs&lt;/code&gt;. During compile time, the
XAML file is parsed to get the elements and other information declared
in it to generate the intermediate C# file, which will then be compiled
together with our &lt;code&gt;.xaml.cs&lt;/code&gt; file to generate the class declaration for a
particular page. In the &lt;code&gt;PageName.g.i.cs&lt;/code&gt; file, we can actually see the
declaration for the &lt;code&gt;InitializeComponent&lt;/code&gt; method that we always call in
the constructor of our &lt;code&gt;.xaml.cs&lt;/code&gt; file. The method basically initiates all
objects declared in the XAML file, which is why if we try to get to
access an element declared in the XAML before the method is called, we
would get a &lt;code&gt;NullReferenceException&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That’s enough for the backstage stuff, lets move on to the syntax. Most
XAML pages looks similar to this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;Page&lt;/span&gt;
    &lt;span class="na"&gt;x:Class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;App2.MainPage&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;IsTabStop=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:x=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.microsoft.com/winfx/2006/xaml&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:local=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;using:App2&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:d=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.microsoft.com/expression/blend/2008&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:mc=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.openxmlformats.org/markup-compatibility/2006&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;mc:Ignorable=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;Grid&lt;/span&gt; &lt;span class="na"&gt;Background=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{StaticResource ApplicationPageBackgroundThemeBrush}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/Grid&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/Page&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As mentioned before, a XAML declaration can be expressed in C#, since
the elements in XAML file are .NET objects. The Page declaration above
basically declare an instance of &lt;code&gt;MainPage&lt;/code&gt; in the &lt;code&gt;App2&lt;/code&gt; namespace which is
a subclass from the &lt;code&gt;Page&lt;/code&gt; class. The &lt;code&gt;xmlns&lt;/code&gt; statements are standard xml
namespace inclusion which would allows us to use various elements.
Similarly, with these declaration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;Page&lt;/span&gt;
    &lt;span class="na"&gt;x:Class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;App2.MainPage&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;IsTabStop=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:x=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.microsoft.com/winfx/2006/xaml&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:local=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;using:App2&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:d=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.microsoft.com/expression/blend/2008&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:mc=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.openxmlformats.org/markup-compatibility/2006&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;mc:Ignorable=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Grid&lt;/span&gt; &lt;span class="na"&gt;Background=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CadetBlue&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;TextBlock&lt;/span&gt; &lt;span class="na"&gt;Text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;FontSize=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;96&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;Foreground=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;BlanchedAlmond&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;HorizontalAlignment=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Center&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;VerticalAlignment=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Center&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/Grid&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Page&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The same result can be produced with these C# code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainPage&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Page&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MainPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InitializeComponent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Grid&lt;/span&gt; &lt;span class="n"&gt;contentGrid&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Background&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SolidColorBrush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Windows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CadetBlue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="n"&gt;TextBlock&lt;/span&gt; &lt;span class="n"&gt;txtBlk&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TextBlock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;FontSize&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;96&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;Foreground&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SolidColorBrush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Windows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlanchedAlmond&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;HorizontalAlignment&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HorizontalAlignment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;VerticalAlignment&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;VerticalAlignment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Center&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="n"&gt;contentGrid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txtBlk&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;contentGrid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As we can see, the XAML element properties are just another way to set
the values of the member variables of the objects. As we can see on the
C# code above, the the Foreground property of a TextBlock is of type
&lt;code&gt;SolidColorBrush&lt;/code&gt; (or any subclass of the &lt;code&gt;Brush&lt;/code&gt; class actually), but in
the XAML syntax, it seems like we are assigning a string to it. This is
because the compiler will parse and assign the appropriate attribute for
us.&lt;/p&gt;
&lt;p&gt;The XAML code above shows two ways of setting a property of an XAML
element, namely the usual property attributes syntax, and the other one
is one known as the Property Element syntax. The property-element syntax
can be used to define some more complex attributes such as defining a
gradient background that requires defining more than one colours and
points. For example, the &lt;code&gt;TextBlock&lt;/code&gt; above can be defined as such with the
property-element syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;TextBlock&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TextBlock.Foreground&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;SolidColorBrush&amp;gt;&lt;/span&gt;
            Black
        &lt;span class="nt"&gt;&amp;lt;/SolidColorBrush&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/TextBlock.Foreground&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TextBlock.Text&amp;gt;&lt;/span&gt;
        Hello
    &lt;span class="nt"&gt;&amp;lt;/TextBlock.Text&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TextBlock.FontSize&amp;gt;&lt;/span&gt;
        96
    &lt;span class="nt"&gt;&amp;lt;/TextBlock.FontSize&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TextBlock.HorizontalAlignment&amp;gt;&lt;/span&gt;
        Center
    &lt;span class="nt"&gt;&amp;lt;/TextBlock.HorizontalAlignment&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TextBlock.VerticalAlignment&amp;gt;&lt;/span&gt;
        Center
    &lt;span class="nt"&gt;&amp;lt;/TextBlock.VerticalAlignment&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/TextBlock&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we see that we defined the properties of the &lt;code&gt;TextBlock&lt;/code&gt; by creating
another elements for each of them, and on for the Foreground property,
we explicitly defined a &lt;code&gt;SolidColorBrush&lt;/code&gt; as the value of the property.
This is entirely optional, we can put the value inside the &lt;code&gt;Foreground&lt;/code&gt;
tag and it would still work, just like we did with the other properties.
We don’t need to explicitly create a element of type &lt;code&gt;Double&lt;/code&gt; for the
&lt;code&gt;FontSize&lt;/code&gt;, nor we need to create another elements for the enumeration of
the alignment properties. We are still relying on the compiler to
actually recognize that the &lt;code&gt;Black&lt;/code&gt; inside the tag is actually referring
to the colour enumeration, but there are times where would need to
explicitly define the property with the usual property-attributes
syntax.&lt;/p&gt;
&lt;p&gt;In the previous example, we explicitly define what are the properties
and its value, but as we see on most XAML we see, there are many cases
where we don’t do that. For example, we didn’t explicitly define the
&lt;code&gt;rootGrid&lt;/code&gt; element of our page is the value for the Content property of
the page, nor we need to explicitly define that our &lt;code&gt;TextBlock&lt;/code&gt; is a
member of the &lt;code&gt;Children&lt;/code&gt; property of the &lt;code&gt;Grid&lt;/code&gt;. This is because every
classes referenced in XAML can have one and only one property that is
defined as its &lt;code&gt;ContentProperty&lt;/code&gt;, where for these properties, the property
element tags are not required. So, instead of writing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;Page&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Page.Content&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;Grid&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;Grid.Children&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;TextBlock/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;TextBlock/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;TextBlock/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/Grid.Children&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/Grid&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/Page.Content&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Page&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can simply write:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;Page&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Grid&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;TextBlock/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;TextBlock/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;TextBlock/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/Grid&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Page&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And it would produce the same result. For the same reason, we can use
the same thing to define the &lt;code&gt;Text&lt;/code&gt; property of a &lt;code&gt;TextBlock&lt;/code&gt; without
creating property element tag for it, So,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;TextBlock&lt;/span&gt; &lt;span class="na"&gt;Text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Is the same as: --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;TextBlock&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TextBlock.Text&amp;gt;&lt;/span&gt;
        Hello
    &lt;span class="nt"&gt;&amp;lt;/TextBlock.Text&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/TextBlock&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- and --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;TextBlock&amp;gt;&lt;/span&gt;
    Hello
&lt;span class="nt"&gt;&amp;lt;/TextBlock&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I guess thats enough for now. Learning about all this made me realise 
that XAML is a very flexible and powerful language and can
be used for many things that can be done with C#, so knowing it would hopefully
be very useful in developing for the some of the latest Microsoft platforms (Win 8, WP 8, etc).
But of course, it is still a markup language, and it has several limitations, 
such as lack of logic processing, and inability to create instances of objects that requires
parameters in its contructor.&lt;/p&gt;</summary><category term="programming"></category><category term="xaml"></category><category term="c#"></category></entry><entry><title>I Bought a Xperia Sola</title><link href="http://hdra.github.io/hndr.me/blog/i-bought-a-xperia-sola" rel="alternate"></link><updated>2012-07-12T17:40:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2012-07-12:blog/i-bought-a-xperia-sola</id><summary type="html">&lt;p&gt;&lt;img alt="Xperia Sola" src="http://api.sonymobile.com/files/xperia-sola-black-464x515.png" /&gt;&lt;/p&gt;
&lt;p&gt;Few days ago, I bought a new phone, &lt;a href="http://www.sonymobile.com/global-en/products/phones/xperia-sola/"&gt;Sony Xperia Sola&lt;/a&gt;. Yes, its an
Android phone. The Lumia phones are simply fucked up, no upgrade path to
WP8, and the price that for some reason aren’t going down, I simply
can’t objectively spend my money on it. In addition, without even any
news of when the new Windows Phone 8 are coming out and their price, I
don’t think I can wait. This doesn’t mean that I will stop developing
for WP, I might buy one for development purpose if they offer a solid
phone at a reasonable price when WP8 comes out, but then again, without
any news on the new development platform either, it doesn’t mean I will
continue developing for WP either.&lt;/p&gt;
&lt;p&gt;Well, enough about WP, lets talk about the new phone instead. The reason
for me choosing this phone is of course, the price-value ratio. It has a
dual-core CPU, SD card slot, NFC, and even a promise of ICS upgrade by
Sony. I also considered other options such as HTC One V and Samsung
Galaxy S Advance, but after pondering about all kinds of stuff, I
decided that the Xperia Sola is the best option after all. Now I can
play with Android without dealing with the PITA emulator that is
included with the SDK. The screen is pretty bright and clear, and the
loudspeaker are also pretty loud. It also came with 4 NFC tags that I
can play with.&lt;/p&gt;
&lt;p&gt;Using Android is pretty fun. Most of the essential apps out there are
available for Android, and I can almost do most things that I do on a PC
with my phone. I installed several reading apps, such as &lt;a href="https://play.google.com/store/apps/details?id=com.aldiko.android&amp;amp;feature=search_result"&gt;Aldiko&lt;/a&gt;,
&lt;a href="https://play.google.com/store/apps/details?id=flipboard.app&amp;amp;feature=search_result"&gt;Flipboard&lt;/a&gt;, and several others. The email client is also pretty
awesome. Other than that, I still need to get used to the on-screen
keyboard, but I think it will be manageable. Although it seems like the
power of Android is also its weak points, in less than a day of using
the phone, I had several apps crash and freezes for no reason, only
cause I can think of is because the many process it is running at once,
which also causes the battery life to be quite short.&lt;/p&gt;
&lt;p&gt;&lt;img alt="my Xperia Sola" src="https://farm8.staticflickr.com/7254/7554965796_574e699c83.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Well, that’s all for now, I am looking forward to discovering more of
this phone.&lt;/p&gt;</summary><category term="android"></category><category term="phone"></category><category term="xperia sola"></category></entry><entry><title>End of Internship</title><link href="http://hdra.github.io/hndr.me/blog/end-of-internship" rel="alternate"></link><updated>2012-07-07T16:35:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2012-07-07:blog/end-of-internship</id><summary type="html">&lt;p&gt;Yesterday was the last day of my internship at Terato Tech, 20 weeks has
passed by so quickly. I had a lot of fun, learned a lot of new stuffs,
and last but not least, met a lot of interesting people.&lt;/p&gt;
&lt;p&gt;I had to leave the project I was working on, and that is a little bit
sad, but I hope I can at least tie up some of the loose ends before I
stop working on it to move on the next project. There are many things
that I wished I had done better, I wish that I actually write a proper
framework for  the game instead of just writing a bunch of messy codes,
but I hope the code that I wrote won’t cause too much trouble.&lt;/p&gt;
&lt;p&gt;So, well, all in all, I enjoyed my internship very much, and I am very
grateful for the company for having me. Thank you Terato.&lt;/p&gt;
&lt;p&gt;&lt;img alt="internship photo" src="http://farm9.staticflickr.com/8294/7559541998_b7f235f911.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;I would have to go back to UTM to wait for my visa to be ready before I
go back, so well, we’ll see.&lt;/p&gt;</summary><category term="internship"></category></entry><entry><title>Blocking time-sucking sites</title><link href="http://hdra.github.io/hndr.me/blog/blocking-time-sucking-sites" rel="alternate"></link><updated>2012-06-26T23:25:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2012-06-26:blog/blocking-time-sucking-sites</id><summary type="html">&lt;p&gt;This is just one thing that I do, and it involves some editing on a
system file, so do it on your own risk. Alright, so one thing that I do to avoid wasting too much time on a
&lt;a href="http://www.9gag.com"&gt;just-for-fun&lt;/a&gt; site, is to completely block it on my OS. Of course, I
can still easily unblock it, but since I am very lazy, most of the time
I simply won’t bother doing it.&lt;/p&gt;
&lt;p&gt;Ok, the way I do this is by editing the host file on my OS, and point
the domain name of the website that I wanted to stop visiting to the
localhost, which unless I am running a web server at the time, will
simply point to nothing.&lt;/p&gt;
&lt;p&gt;On Windows, the hosts file is located at
&lt;code&gt;C:\Windows\System32\drivers\etc\hosts&lt;/code&gt;. Open up that file, and you should
see some description of the file, and an example of the host entry for
the localhost, which points to 127.0.0.1. The format for the host file
is like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Destination&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Url&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;toroute&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, for example, in my hosts file, I have this line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mf"&gt;127.0.0.1&lt;/span&gt; &lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="mf"&gt;.9&lt;/span&gt;&lt;span class="n"&gt;gag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, whenever I enter &lt;code&gt;www.9gag.com&lt;/code&gt;
to my browser, I would get routed to my localhost. Simple enough.&lt;/p&gt;
&lt;p&gt;On Linux, the steps are the same, the hosts file is located at
&lt;code&gt;/etc/hosts&lt;/code&gt;. The format are the same as it is on Windows.&lt;/p&gt;
&lt;p&gt;Note that to edit these files, you need to have administrator or root
access on the OS.&lt;/p&gt;
&lt;p&gt;If you don’t want to edit individual hosts file on every computer you
own, an alternative is to use a service such as &lt;code&gt;OpenDNS&lt;/code&gt;_. You can
register for an account, customize the filtering, and simply configure
the internet access on your computer to use the service. That’s all for
now.&lt;/p&gt;</summary><category term="hosts"></category></entry><entry><title>Windows Phone 8, WinRT, and so on.</title><link href="http://hdra.github.io/hndr.me/blog/windows-phone-8-winrt-and-so-on" rel="alternate"></link><updated>2012-06-24T13:01:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2012-06-24:blog/windows-phone-8-winrt-and-so-on</id><summary type="html">&lt;p&gt;This post is basically a rant. TLDR:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AWESOME: WP8 is awesome! Native code support, multicore processors,
simply awesome!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LAME: Current WP7 devices just got screwed. No clear date on release
data, no clear information on development model for the new OS.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, it’s a bit late for a blog post, but I just got the time to write
about it, so here it goes, the Windows Phone 8 announcement thoughts.
Few days ago, on the 20th (or 21st here where I live), Microsoft finally
unveiled the game plan for Windows Phone with Windows Phone 8. I myself
followed the announcement live in the middle of night here, and well,
overall, I have mixed feelings about it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Windows Phone 8 Start Screen" src="http://windowsteamblog.com/cfs-filesystemfile.ashx/__key/CommunityServer-Blogs-Components-WeblogFiles/00-00-00-53-71-metablogapi/4477.StartScreen_5F00_Dave22_5F00_630D4973.png" /&gt;&lt;/p&gt;
&lt;p&gt;Let’s start with the awesome and exciting stuff. Windows Phone
8 is going to be AWESOME. Really. To be honest I didn’t think Windows
Phone 7 is a full fledged phone OS. I love it, but to be honest, it has
too many flaws that would make me wouldn’t even consider it as my main
phone OS if it weren’t for it being so beautiful. From the lack of basic
phone features such as USSD support to native code support, it even has
some really stupid flaw such as the inability to separate music volume
control from alert volume. &lt;a href="http://windowsteamblog.com/windows_phone/b/windowsphone/archive/2012/06/20/announcing-windows-phone-8.aspx"&gt;Windows Phone 8&lt;/a&gt; is a break that would
allows Windows Phone to actually compete with iOS and Android on an even
level. One thing that excite me the most is that it will allow
developers to run native C and C++ codes on it, this will open up
Windows Phone 8 to some really awesome apps that can’t exist on WIndows
Phone 7 because of its restrictions, from the many popular game engines
such as Unity and UDK, and it also allows developers to actually develop
its own DirectX based games. This is one BIG plus.&lt;/p&gt;
&lt;p&gt;Other awesome stuffs includes multicore-support, Nokia maps integration,
NFC support, and SD-card support. These are mostly end-user features
that is pretty awesome as well, but it would also allows developers to
take advantage of these capabilities for more variety of applications.&lt;/p&gt;
&lt;p&gt;Now, lets move on to the bad thing. One really really BAD thing IMO, the
current Windows Phone 7 devices will not be able to receive upgrades to
Windows Phone 8. In other words, the new applications that take
advantage of the new Windows Phone 8 native code support will not be
able to run on the current devices. Needless to say, I immediately
canceled my plan to buy a Lumia, and I believe I am not the only one to
do this, nobody would spend money to actually buy a phone that is
essentially dead. Yes, they just killed Windows Phone 7 and the existing
devices running it. This really bummed me. It makes me feels like being
cheated on, they made people to develop for it, and then they just
killed the platform. Yes, the current Windows Phone 7 applications will
still run on the next Windows Phone 8, but with the next version of
Windows Phone 8 being built on a completely different architecture, I
don’t think it is possible to just run the application like that.
Actually, this change doesn’t really matter from a developer’s
perspective, but developers are developing for the users, and with
Windows Phone 7 itself is a reboot from the Windows Mobile, its hard for
me to feel I am not wasting my time developing for Windows Phone 8 which
is another reboot from Windows Phone 8. To make things worse, there is
not words on the development tools on Windows Phone 8 yet. One of the
things that Microsoft emphasized was that the Windows Phone 8 will share
a lot of code with Windows 8, but it seems like its not that simple. The
&lt;a href="http://wildermuth.com/2012/6/22/Windows_Phone_8_-_What_do_I_think"&gt;blog post here&lt;/a&gt; sums it up pretty nicely. With a lot of things being
so unclear here, I doubt people will feel like developing for Windows
Phone 8 for now.&lt;/p&gt;
&lt;p&gt;The consolation that they offer to the current Windows Phone device
owners are the intermediate Windows Phone 7.8 update that says will
bring new features from the Windows Phone 8. But with the lack of native
code support, I don’t think that will make much change anyway. The only
thing they promise in the Windows Phone 7.8 update is the new
homescreen, which allows for new size and colors for the live tiles,
which I personally think sucks anyway. It makes the homescreen too messy
for my taste.&lt;/p&gt;
&lt;p&gt;Other new features that I am not too sure about it the new screen
resolutions support. Windows Phone 8 will support two new screen
resolutions, 1280x768 and 1280x720, which is cool, except that why do
they have to make it in a different aspect ratio?? WHY??. Another thing
is, in-app purchase support. Cool, except that even the Windows Phone
marketplace is not even available where I live yet. So, its meaningless
to me.&lt;/p&gt;</summary><category term="rants"></category><category term="windows phone"></category><category term="wp7"></category><category term="wp8"></category></entry><entry><title>Data Binding in .NET</title><link href="http://hdra.github.io/hndr.me/blog/data-binding-in-net" rel="alternate"></link><updated>2012-06-10T10:37:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2012-06-10:blog/data-binding-in-net</id><summary type="html">&lt;p&gt;I am now trying to use the concept of MVVM in my applications, as I
believe a proper separation of concerns is very important in building an
application, as from I personally experienced when developing in PHP
with CodeIgniter, it really makes development much easier.&lt;/p&gt;
&lt;p&gt;So, I think for an event driven application pattern such as WPF,
Silverlight, and also WP7, (maybe Windows 8 as well), it seems pretty
obvious to take advantage of the existing abstraction of the framework,
so MVVM would go well with these kind of applications.&lt;/p&gt;
&lt;p&gt;I can understand the concept of the &lt;a href="http://msdn.microsoft.com/en-us/magazine/dd419663.aspx"&gt;MVVM pattern&lt;/a&gt; itself quite well,
but I am not really able to grasp its implementation, I think it is
because I don't really understand the basic features of the framework
that the pattern rely on. One of which is the Data Binding. So, here it
is, my attempt to get better understanding on it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;TextBlock&lt;/span&gt; &lt;span class="na"&gt;Text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{Binding Name}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/TextBlock&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;while in the code behind,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;PhoneApp1&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainPage&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PhoneApplicationPage&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;MyClass&lt;/span&gt; &lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MainPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;InitializeComponent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;dataSource&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;_name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is one problem with this, when the value of the data source
changes, the binding target on the UI won’t change along with it, so, to
make the value of the binding target change along with the data source,
we need to have our class implement &lt;code&gt;INotifyPropertyChanged&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s add a button that will change the value of the data source.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;TextBlock&lt;/span&gt; &lt;span class="na"&gt;Text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{Binding name}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/TextBlock&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;Button&lt;/span&gt; &lt;span class="na"&gt;Content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Button&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;button1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Click=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;button1_Click&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And change the code behind to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;PhoneApp1&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainPage&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PhoneApplicationPage&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Constructor&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;MyClass&lt;/span&gt; &lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MainPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;InitializeComponent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;dataSource&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;button1_Click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RoutedEventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;INotifyPropertyChanged&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;set&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;_name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;Notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;event&lt;/span&gt; &lt;span class="n"&gt;PropertyChangedEventHandler&lt;/span&gt; &lt;span class="n"&gt;PropertyChanged&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;propertyName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PropertyChanged&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;PropertyChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PropertyChangedEventArgs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;propertyName&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, every time we click on the button, the value of the name property
will change, and the &lt;code&gt;TextBlock&lt;/code&gt; will change its content accordingly.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;INotifyPropertyChanged&lt;/code&gt; interface exposes the &lt;code&gt;PropertyChanged&lt;/code&gt; event,
where we would raise when the value of the data is changed, and there
are the event handler present. One might ask, why? It is because when
the class is being used as a data source in a binding, the binding
target will subscribe to the event, and call the necessary method to
update the view.&lt;/p&gt;
&lt;p&gt;There are several modes of binding, the default is &lt;code&gt;OneWay&lt;/code&gt;, which is a
binding from the data source to the target, where any changes on the
data source will be propagated to the target, but not vice versa,
another mode is &lt;code&gt;TwoWay&lt;/code&gt;, which is pretty much self descriptive, and also
&lt;code&gt;OneTime&lt;/code&gt;, which only set the data when the binding is created. So, if we
add this textbox to the previous example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;TextBox&lt;/span&gt; &lt;span class="na"&gt;Text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{Binding name,Mode=TwoWay}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Whenever the value of the textbox is changed, the textblock that is
bound to the same data source will update its value accordingly. Note
that we would still need to implement &lt;code&gt;INotifyPropertyChanged&lt;/code&gt; for the
view to update as the value changes. We can specify what triggers the
update back to the source via the &lt;code&gt;UpdateSourceTrigger&lt;/code&gt; property. Its
values depends on the dependency properties of the target, on the
example textbox above, the default trigger is &lt;code&gt;LostFocus&lt;/code&gt;, so the data
source will be notified of the new value when the textbox has lost its
focus. We can also trigger the update manually by setting the property
to &lt;code&gt;Explicit&lt;/code&gt;, which will only update the value when the application calls
&lt;code&gt;UpdateSource&lt;/code&gt;, e.g. when the user clicks on a button.&lt;/p&gt;
&lt;p&gt;There are several &lt;a href="http://msdn.microsoft.com/en-us/library/ms746695.aspx"&gt;ways&lt;/a&gt; to specify a binding source, the examples
above specified the data source by setting the &lt;code&gt;DataContext&lt;/code&gt; property of
the current page from the code behind. The child elements within the
page inherit the &lt;code&gt;DataContext&lt;/code&gt; from its parent, we can see that this
method is very convenient when we have a single data source that we use
across the page. We can also set the &lt;code&gt;DataContext&lt;/code&gt; property directly on
the element directly, instead of inheriting it from its parent. To
specify the data source for an element individually, one of the is by
setting the Source property of the element, by setting the Source
property, the data will be able to get the data from the source that it
specify without depending on the data source of its parent element.
Other options are &lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.data.binding.relativesource.aspx"&gt;RelativeSource&lt;/a&gt;, which is used to specify the data
source relative to the target, and &lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.data.binding.elementname.aspx"&gt;ElementName&lt;/a&gt; which is useful if you
want to bind to another element in your view, e.g. binding the height of
an element to a textbox value.&lt;/p&gt;
&lt;p&gt;The examples above shows binding among data source and target of the
same data type, e.g. string to string, but there are times where we may
want to bind a source of a different data type, for example, binding the
background colour of an element to an hexadecimal value, or displaying
the same date in several different format. One way would be to create an
additional property with a getter that gets its value from the source,
but that isn’t a very good way, for one thing, two-way binding and
property changed notification got more complicated than it should be.
One solution is to use the &lt;code&gt;ValueConverter&lt;/code&gt;, which is creating a custom
class that implements the &lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.data.ivalueconverter.aspx"&gt;IValueConverter&lt;/a&gt; interface. I won’t talk
about it too much in this post, maybe in some other post, you can read
more about it on that link. .NET Framework also provide a number of
converter that we can use.&lt;/p&gt;
&lt;p&gt;So far, the examples shows only binding to a single data type, but we
often need to bind to a collection, for example, binding a listbox to a
list of person. To implement a collection, we can use one of the generic
collection classes, such as, &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;Collection&amp;lt;T&amp;gt;&lt;/code&gt; and others. We can
also implement a custom collection by implementing the &lt;code&gt;IEnumerable&lt;/code&gt;
interface, but to enable automatic UI update on change, we need a way to
provide notification on data changes, just as we did with the single
instance data source. To do that, the collection need to implement the
&lt;a href="http://msdn.microsoft.com/en-us/library/system.collections.specialized.inotifycollectionchanged.aspx"&gt;INotifyPropertyChanged&lt;/a&gt; interface,
but it is recommended to use the class provided by the .NET Framework
which did the job for us, the &lt;code&gt;ObservabeCollection&amp;lt;T&amp;gt;&lt;/code&gt; class. Let’s change
the previous example to show a little bit of collection binding. Lets
add a listbox to the our application.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;ListBox&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;listBox1&amp;quot;&lt;/span&gt;&lt;span class="na"&gt;ItemsSource=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{Binding colls}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, let’s change the &lt;code&gt;MyClass&lt;/code&gt; a little bit, and change the previous
button click handler to add more element to the collection.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;PhoneApp1&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainPage&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PhoneApplicationPage&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Constructor&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;MyClass&lt;/span&gt; &lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MainPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;InitializeComponent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;dataSource&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;colls&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ObservableCollection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;string 1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;string 2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;button1_Click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RoutedEventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;colls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;INotifyPropertyChanged&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;set&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;_name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;Notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ObservableCollection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;colls&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;event&lt;/span&gt; &lt;span class="n"&gt;PropertyChangedEventHandler&lt;/span&gt; &lt;span class="n"&gt;PropertyChanged&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;propertyName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PropertyChanged&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;PropertyChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PropertyChangedEventArgs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;propertyName&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, whenever we click the button, a new string will be added to the
collection, and the listbox content will reflect the changes as well
because of the &lt;code&gt;INotifyCollectionChanged&lt;/code&gt; that is implemented by the
&lt;code&gt;ObservableCollection&lt;/code&gt;. Note that to detect when the value of individual
element change, we still need to implement &lt;code&gt;INotifyPropertyChanged&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, when we are working with a collection of data, often we need to
filter, sort and group the data based on the current context of the
application, to do that without changing the underlying data source, we
can use collections view. I wouldn’t talk much about it in this post,
but more information about it are available &lt;a href="http://msdn.microsoft.com/en-us/library/ms752347.aspx#how_to_implement_collections\"&gt;here&lt;/a&gt; and &lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.data.collectionviewsource.aspx"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;On the examples above, we declared our data bindings mostly with XAML,
and that is indeed the most common usage of data binding, so let’s talk
more about it. On our examples above, we declared a binding with the
&lt;code&gt;{Binding name}&lt;/code&gt;. This is actually a shortcut to declare the binding, we
know that the child element will get its binding &lt;code&gt;Source&lt;/code&gt; from its parents
&lt;code&gt;DataContext&lt;/code&gt;, and we can actually declare a path to specify which
property of the source that we want to bind to. So, that declaration
just now can be written as &lt;code&gt;{Binding Source={StaticResource dataSource},Path=name}&lt;/code&gt;. We can use StaticResource to refer to an
instance that we declare in the XAML, so to declare our &lt;code&gt;dataSource&lt;/code&gt; in
XAML, we can use something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;Page&lt;/span&gt; &lt;span class="na"&gt;xmlns:c=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;clr-namespace:PhoneApp1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;phone:PhoneApplicationPage.Resources&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;c:MyClass&lt;/span&gt; &lt;span class="na"&gt;x:Key=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dataSource&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/phone:PhoneApplicationPage.Resources&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the the &lt;code&gt;dataContext&lt;/code&gt; itself is the data source that we want to bind
to, we can just declare the binding with simply &lt;code&gt;{Binding}&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;References:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.codeproject.com/Articles/3665/Data-binding-concepts-in-NET-windows-forms"&gt;http://www.codeproject.com/Articles/3665/Data-binding-concepts-in-NET-windows-forms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/ms752347.aspx"&gt;http://msdn.microsoft.com/en-us/library/ms752347.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.codeproject.com/Articles/80555/Databinding-in-Silverlight-applications"&gt;http://www.codeproject.com/Articles/80555/Databinding-in-Silverlight-applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/cc278072(v=vs.95).aspx"&gt;http://msdn.microsoft.com/en-us/library/cc278072(v=vs.95).aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="C#"></category><category term="programming"></category></entry><entry><title>Threading in C#</title><link href="http://hdra.github.io/hndr.me/blog/threading-in-c" rel="alternate"></link><updated>2012-05-31T23:05:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2012-05-31:blog/threading-in-c</id><summary type="html">&lt;p&gt;Well, this time, I am going to talk about thread, the concept of thread
is pretty simple to understand, so I wont explain the here, but you can
read more about it in this &lt;a href="http://en.wikipedia.org/wiki/Thread_(computing)"&gt;wiki page&lt;/a&gt;. Threading are used quite
extensively in most modern computer programs, for example separating
threads to handle button clicks on a GUI button from the one that
handles data processing, or in chatting programs, where it separates
threads to send messages from the one that handles incoming messages and
display it on the screen.&lt;/p&gt;
&lt;p&gt;In .NET, threading is handled by the &lt;code&gt;Thread&lt;/code&gt; class, which lives in
the &lt;code&gt;System&lt;/code&gt; namespace, so to use it, you need to add this first:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Threading&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To create a new thread, we need to create a new Thread instance, which
takes a &lt;a href="http://www.myblog.name/2012/05/delegates-in-c-and-a-tiny-bits-of-events/"&gt;delegate&lt;/a&gt; of type &lt;code&gt;ThreadStart&lt;/code&gt; (remember that delegate is
like a pointer to a method? this would mean that the thread will run the
method that the delegate parameter points to.). ThreadStart itself is a
delegate that does not return any value or accept any parameter. Here is
an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Linq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Threading&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;ConsoleApplication1&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Program&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ThreadStart&lt;/span&gt; &lt;span class="n"&gt;someCode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;delegate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
            &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;someCode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="n"&gt;t2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;someCode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="n"&gt;t3&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;someCode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;t3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="n"&gt;someCode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Read&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will see that the each number will be printed 4 times, but in no
particular order, the operating decides which threads gets run at any
given time, but you can see that the same method is being run in 4
different threads. The three threads that we created with the Thread
class, and the main thread of the program itself.&lt;/p&gt;
&lt;p&gt;In the example above, the threads are all accessing local variables,
that is, they don’t share any data between them. This makes things
pretty simple, but there are times where the threads are accessing a
shared data, and this may cause a problem known as &lt;a href="http://en.wikipedia.org/wiki/Race_condition"&gt;race condition&lt;/a&gt;. To
prevent, that, we need a way sync the data by locking the data to a
thread during a section of the program that may cause a race condition.
In .NET, the Threading namespace provides us with a Monitor class that
we can use to lock an object. Here is an example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sharedData&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SomeClass&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// lock the sharedData&lt;/span&gt;
&lt;span class="n"&gt;Monitor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Enter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sharedData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Write the critical codes here.&lt;/span&gt;
&lt;span class="c1"&gt;// Codes between the Enter and Exit can only be performed by one thread&lt;/span&gt;
&lt;span class="c1"&gt;// at a time,&lt;/span&gt;

&lt;span class="c1"&gt;// release the sharedData&lt;/span&gt;
&lt;span class="n"&gt;Monitor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sharedData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Thread synchronization is pretty complicated topic, I think will cover
them in another post some time later, when I got a better understanding
of it. &lt;a href="http://msdn.microsoft.com/en-us/library/ms173179.aspx"&gt;Here&lt;/a&gt; is an MSDN article on the topic.&lt;/p&gt;
&lt;p&gt;The Thread class provides several methods to control the execution of
the thread, here are some of them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// these examples are called from within the execution of another thread&lt;/span&gt;
&lt;span class="c1"&gt;// e.g. t2&lt;/span&gt;

&lt;span class="c1"&gt;// Pausing the current thread execution for 2 seconds&lt;/span&gt;
&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Wait for t1 thread to finish executing&lt;/span&gt;
&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// stop the execution of a thread&lt;/span&gt;
&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Abort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// pause the thread&lt;/span&gt;
&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Suspend&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// resume the thread&lt;/span&gt;
&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Resume&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// accessing the thread state&lt;/span&gt;
&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ThreadState&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;C# also provides some methods to control the execution of another
process via the &lt;code&gt;Process&lt;/code&gt; class in the &lt;code&gt;System.Diagnostics&lt;/code&gt; namespace,
but I’m not too concerned about that for now, so this post ends here.&lt;/p&gt;
&lt;h2&gt;References:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/aa645740(v=vs.71).aspx"&gt;http://msdn.microsoft.com/en-us/library/aa645740(v=vs.71).aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.albahari.com/threading/"&gt;http://www.albahari.com/threading/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.c-sharpcorner.com/uploadfile/mgold/multithreadingintro10062005000439am/multithreadingintro.aspx"&gt;http://www.c-sharpcorner.com/uploadfile/mgold/multithreadingintro10062005000439am/multithreadingintro.aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="C#"></category><category term="programming"></category></entry><entry><title>Implicitly Typed Language and Anonymous Types in C#</title><link href="http://hdra.github.io/hndr.me/blog/implicitly-typed-language-and-anonymous-types-in-c" rel="alternate"></link><updated>2012-05-30T23:16:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2012-05-30:blog/implicitly-typed-language-and-anonymous-types-in-c</id><summary type="html">&lt;p&gt;In C#, there is this &lt;code&gt;var&lt;/code&gt; keyword, which allows you to declare a
variable without explicitly specifying its data type. It is important to
note, that this doesn’t mean that it is dynamically typed, it simply
means that the compiler will infer the data type for you, and it is also
important to note, that it is strongly typed. So, this code below, will
simply create a variable called x, with the data type of string.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since &lt;code&gt;x&lt;/code&gt; is a strongly typed &lt;code&gt;string&lt;/code&gt;, if you try to assign &lt;code&gt;x&lt;/code&gt; to an
&lt;code&gt;int&lt;/code&gt;, it will throw an error. Even though it may seems inflexible, it
is necessary when we are using anonymous types.&lt;/p&gt;
&lt;p&gt;Anonymous Types allows you to query a set of data, without having to
create a class/struct to hold it. For example, if I wanted to to query a
Car database, if I want to put it in a proper data structure,
I can either put it in a hash table object, or I would have to declare
a class first.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Car&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With anonymous type, we can do something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;myCar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1990&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;unknown&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Behind the scene, the compiler will actually generate a class for us,
with all of the necessary properties with it. This can be especially
useful if we need to query just a subset of the properties, and creating
the new objects without all of its properties isn’t very feasible.&lt;/p&gt;
&lt;h2&gt;References:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/bb397696"&gt;http://msdn.microsoft.com/en-us/library/bb397696&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="C#"></category><category term="programming"></category></entry><entry><title>Lambda Expression with C#</title><link href="http://hdra.github.io/hndr.me/blog/lambda-expression-with-c" rel="alternate"></link><updated>2012-05-30T21:40:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2012-05-30:blog/lambda-expression-with-c</id><summary type="html">&lt;p&gt;Previous in my post regarding delegate, I talked a little about
anonymous method that can be used with delegates, there are other forms
to declare inline functions. Both of them are collectively known as
anonymous functions of C#. Here is one example that shows how different
method assignments are used with delegate.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SampleClass&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;delegate&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SampleDelegate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SampleMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;SampleDelegate&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SampleMethod&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;SampleDelegate&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SampleDelegate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SampleMethod&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;SampleDelegate&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;delegate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);};&lt;/span&gt;
        &lt;span class="n"&gt;SampleDelegate&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);};&lt;/span&gt;

        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All those methods above do the exact same thing, SampleDelegate d is
method with lambda expression. Lambda expressions are expressed with the
lambda operator, “=&amp;gt;”. The left side of the lambda expression specifies
any input parameter that it may have, and the right side holds the
expression block.&lt;/p&gt;
&lt;p&gt;There are several usage pattern of lambda expression. First up is
expression lambda, which basically is just a lambda expression with an
expression on its right side, it return the result of the expression.
Here is an example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// parentheses can be omitted if it only has one parameter&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// use empty parenthese for expression without any parameter&lt;/span&gt;
&lt;span class="p"&gt;()=&amp;gt;&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The second one, statement lambda, is just a lambda expression with a
statement on the right side.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;{&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Well, that’s it for the most basics of the lambda expression, there are
other uses of lambda expressions, such as for use with LINQ, but I will
talk about that later, as that involves some C# features that I’m not
familiar with yet. BTW, if you wondered why the lambda expressions above
are missing the return/parameters type, that’s because it is able the
infer the type from context, but of course, you can still specify the
type explicitly if that’s what you want.&lt;/p&gt;
&lt;p&gt;Update: found an interesting example of the usage of the lambda
expressions &lt;a href="http://blogs.msdn.com/b/ericwhite/archive/2006/10/03/lambda-expressions.aspx"&gt;here&lt;/a&gt;, here is a code snippet from it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Program&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;MyWhereMethod&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;filteredList&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyWhereMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;filteredList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, well there is how some of the lambda queries are done.&lt;/p&gt;
&lt;h2&gt;References:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/bb397687.aspx"&gt;http://msdn.microsoft.com/en-us/library/bb397687.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.codeproject.com/Articles/24255/Exploring-Lambda-Expression-in-C"&gt;http://www.codeproject.com/Articles/24255/Exploring-Lambda-Expression-in-C&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="C#"></category><category term="programming"></category></entry><entry><title>Events in C#</title><link href="http://hdra.github.io/hndr.me/blog/events-in-c" rel="alternate"></link><updated>2012-05-30T00:27:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2012-05-30:blog/events-in-c</id><summary type="html">&lt;p&gt;Alright, last time I posted about &lt;code&gt;Delegate&lt;/code&gt;, and together with event,
they are one of the most important concept to understand in event driven
application framework, such as WPF, Silverlight, and Silverlight for
WP7, and maybe even WinRT as well (I haven’t tried it), so I believe it
is important to understand how it work, especially when these two are
pretty closely related.&lt;/p&gt;
&lt;p&gt;I find the explanation on &lt;a href="http://msdn.microsoft.com/en-us/library/aa645739(v=vs.71).aspx"&gt;MSDN&lt;/a&gt; is pretty easy to understand, Event is
a way for a class to provide notifications to clients when something
interesting happens. Event is declared with a delegate, in fact, there
aren’t much difference between a regular delegate and an event. Here is
an example of an event declaration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// declare the delegate&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;delegate&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SomethingHappenedEventHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;EventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// On the class that has the event&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SomeClass&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;event&lt;/span&gt; &lt;span class="n"&gt;SomethingHappenedEventHandler&lt;/span&gt; &lt;span class="n"&gt;SomethingHappened&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It indeed looks like a regular delegate declaration, and indeed, it is
indeed very similar to a regular delegate, and the 'event' keyword is
something that we can think of like a modifier, which makes the delegate
to behaves a little bit different. The first difference is, a delegate
with an event modifier can be included in an interface, where a regular
delegate can't. The second one is, a delegate with an event modifier can
only be called from within the class, but it can be changed/assigned to
other method that handle the event, where a regular delegate can be
called by whoever that can access it.&lt;/p&gt;
&lt;p&gt;Finally, like what I mentioned on my previous post, event delegate must
conform to a special restriction, where it must return void, and accepts
two arguments, an object that invoke the event, and the information
regarding the event that is derived from the EventArgs class, but this
is a restriction placed by the .NET framework instead of the C# language
itself, so, .NET framework has provided a delegate that can be used for
this, the EventHandler. So, if your event doesn't provide any additional
data that what is provided by the EventHandler, it is better to just use
the provided delegate. If you do need to pass additional data, you can
just inherit the EventArgs class and provide additional infomation in
the class. There are some others differences between the two, but I
think those are too advanced and not too relevant in practical usage.&lt;/p&gt;
&lt;p&gt;Since event is basically a delegate, a firing event is actually just an
invocation of the method that the delegate points to, which we usually
refer to as handling the event. So, in GUI programming, we often see
this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Button&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Click&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;RoutedEventHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_Click&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That means, somewhere in the Button class declaration, they have an
event of RoutedEventHandler delegate, and will be called when the the
necessary condition is fulfilled. Something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;delegate&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;RoutedEventHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;RoutedEventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Button&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;event&lt;/span&gt; &lt;span class="n"&gt;RoutedEventHandler&lt;/span&gt; &lt;span class="n"&gt;Click&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;checkCondition&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mouseOnButton&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;mouseUp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Click&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;Click&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of course, it is not actually implemented like that, but I hope it can
give you the idea. Maybe the button class will call the &lt;code&gt;checkCondition&lt;/code&gt;
periodically, and check if it fulfill the condition to detect a mouse
click, if it does, it will call the &lt;code&gt;Click&lt;/code&gt; delegate, which will invoke
the method that it points to, where in our example, will call the
&lt;code&gt;x_Click()&lt;/code&gt; method which we assigned previously using the &lt;code&gt;+=&lt;/code&gt; operator. In
this case, we call the &lt;code&gt;Button&lt;/code&gt; class the event provider, and the class
that implemented the event handler, the event listener/subscriber.&lt;/p&gt;
&lt;p&gt;We can also see that the mouse click event uses a subclass of the
&lt;code&gt;EventArgs&lt;/code&gt; class, which may provide additional information of the
event, such as the time it was triggered, etc. For example, the
&lt;code&gt;RoutedEventArgs&lt;/code&gt; class have a property called &lt;code&gt;Handled&lt;/code&gt; that indicate
whether the event is to be marked handled.&lt;/p&gt;
&lt;h2&gt;References:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/aa645739(v=vs.71).aspx"&gt;http://msdn.microsoft.com/en-us/library/aa645739(v=vs.71).aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.codeproject.com/Articles/11541/The-Simplest-C-Events-Example-Imaginable"&gt;http://www.codeproject.com/Articles/11541/The-Simplest-C-Events-Example-Imaginable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="C#"></category><category term="programming"></category></entry><entry><title>Some stuff I didn’t know about String in C#</title><link href="http://hdra.github.io/hndr.me/blog/some-stuff-i-didnt-know-about-string-in-c" rel="alternate"></link><updated>2012-05-25T23:08:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2012-05-25:blog/some-stuff-i-didnt-know-about-string-in-c</id><summary type="html">&lt;p&gt;Well, its a bit strange getting to know something that I’ve used
extensively for quite a while, but there are indeed some things that
feels revealing.&lt;/p&gt;
&lt;p&gt;First of all, I knew that strings is a little bit special, in a way that
it is a reference type, but it behaves very much like a value type, for
example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;SomeClass&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SomeClass&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;SomeClass&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// a.age will be 40, since they are both referring to the same value&lt;/span&gt;
&lt;span class="c1"&gt;// but,&lt;/span&gt;

&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;world;  // x will stay as &amp;quot;&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, well, that’s about it. I also knew that string are immutable, as in,
the value can’t be changed after they are set, so something like this
would throw an error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;j&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But, since something like that didn’t get used much anyway, I never put
too much thought into it, and I just learned that the two are actually
related. In the first code snippet, since x is immutable, when y try to
change the value, it will create a new string instead, so it will point
to a new location in the memory, leaving x alone, and the two no longer
refer to the same memory location.&lt;/p&gt;
&lt;p&gt;The value of the string itself are stored in the same memory location as
well, so even if two strings are created separately, if they have the
same value, they will still point to the same location.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// x == y is true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I personally have ran into some bugs related to this behaviour, of course,
I just tried do something else that works without understanding why. Until now.&lt;/p&gt;
&lt;p&gt;That mentioned, one thing to remember is that new string values are
created each time the value change, so that means there would be a lot
of temporary objects in the memory, and the garbage collection will run
more often, so if there value of the change is something that is done
very extensively in the program, it would be better to use a class
called StringBuilder. It behaves almost the same way as a string, but it
is not immutable, and it is designed to build string, as the name
suggest. I wanted to talk more about it, but I found a &lt;a href="http://www.dotnetperls.com/stringbuilder"&gt;better
explanation&lt;/a&gt; about it, so I’ll just use this post as a book mark to that
post.&lt;/p&gt;
&lt;p&gt;Some other interesting stuffs about strings and the manipulation of
strings as well:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.codinghorror.com/blog/2009/01/the-sad-tragedy-of-micro-optimization-theater.html"&gt;http://www.codinghorror.com/blog/2009/01/the-sad-tragedy-of-micro-optimization-theater.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.codinghorror.com/blog/2006/07/i-heart-strings.html"&gt;http://www.codinghorror.com/blog/2006/07/i-heart-strings.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.codinghorror.com/blog/2005/03/if-you-like-regular-expressions-so-much-why-dont-you-marry-them.html"&gt;http://www.codinghorror.com/blog/2005/03/if-you-like-regular-expressions-so-much-why-dont-you-marry-them.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.stevex.net/string-formatting-in-csharp/"&gt;http://blog.stevex.net/string-formatting-in-csharp/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blogs.msdn.com/b/kathykam/archive/2006/03/29/564426.aspx"&gt;http://blogs.msdn.com/b/kathykam/archive/2006/03/29/564426.aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="C#"></category><category term="programming"></category></entry><entry><title>Some Standard C# Object Methods that you might want to override</title><link href="http://hdra.github.io/hndr.me/blog/some-standard-c-object-methods-that-you-might-want-to-override" rel="alternate"></link><updated>2012-05-25T22:22:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2012-05-25:blog/some-standard-c-object-methods-that-you-might-want-to-override</id><summary type="html">&lt;p&gt;Alright, I’ll get it straight to the point, since this is just a note to
myself anyway,&lt;/p&gt;
&lt;p&gt;First one, the ToString() :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;YourClass&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Name: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;,Age: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The reason to this is, simple, to have an easy way to get a string
representation of your object. Of course, in a way, you can also create
a new method to return the same thing, but it is a good idea to do it
the “C# way”, and the ToString method is always there, so why create two
methods that serve the same purpose? This is similar to the
&lt;code&gt;__string__&lt;/code&gt; method in Python.&lt;/p&gt;
&lt;p&gt;The second one, Equals():&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;MyClass&lt;/span&gt; &lt;span class="n"&gt;myclass&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myclass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;myclass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The reason to do this, is so to have an easy way to compare objects in
C#, as objects are stored as references, a ‘==’ comparison will always
return false, even if they have the same properties values, unless they
actually refer to the same object. The reason to override this method
instead of creating a new one, is the same as the reason to override the
ToString() method I mentioned above.&lt;/p&gt;</summary><category term="C#"></category><category term="programming"></category></entry><entry><title>C#–Optional Arguments and Constructor Chaining</title><link href="http://hdra.github.io/hndr.me/blog/c-optional-arguments-and-constructor-chaining" rel="alternate"></link><updated>2012-05-22T23:19:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2012-05-22:blog/c-optional-arguments-and-constructor-chaining</id><summary type="html">&lt;p&gt;Learned something new about C# today, first thing is Constructor
Chaining.  Constructor chaining enables constructors to call another
overloaded constructor, with it, the amount of duplicate code can be
reduced significantly, here is an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// It can be used to call the base class&amp;#39; constructor as well, with the&lt;/span&gt;
&lt;span class="c1"&gt;// base keyword&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AwesomePerson&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;awesomenessLevel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;AwesomePerson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;awesomenessLevel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;AwesomePerson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// and so on...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With that, I can reduce the amount of code in the constructors, and
still get the options of passing only the argument that I need to the
constructors. There is another way to do this, starting with C# 4.0, it
introduced optional arguments that is common in dynamic languages, and
it is pretty awesome, and it can be combined with the constructors
chaining above for more power!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                  &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// To create the instances:&lt;/span&gt;
&lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Joe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Somewhere&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;John&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;References:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/199761/how-can-you-use-optional-parameters-in-c"&gt;http://stackoverflow.com/questions/199761/how-can-you-use-optional-parameters-in-c&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/dd264739.aspx"&gt;http://msdn.microsoft.com/en-us/library/dd264739.aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="C#"></category><category term="programming"></category></entry><entry><title>Javascript–Setting events to unique anonymous functions</title><link href="http://hdra.github.io/hndr.me/blog/javascript-setting-events-to-unique-anonymous-functions" rel="alternate"></link><updated>2012-05-22T22:24:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2012-05-22:blog/javascript-setting-events-to-unique-anonymous-functions</id><summary type="html">&lt;p&gt;Ok, the easiest way to convey my point is with code, so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;);}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;someDiv&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Say you are trying to set the onclick event of an array of elements in
your page, and each of these events need to trigger the same function,
but passing different parameter, seems simple enough, but if you try to
run the code above, all of the click events will print the value 5. The
value of i is 5 because the value is incremented with the for loop
before it stopped executing, simple enough, but it seems like the
anonymous functions that we created refer to the same value as well.&lt;/p&gt;
&lt;p&gt;So, well, the first thing that comes to mind is I kind of need to create
"instances" of these anonymous functions individually, with the help of
this &lt;a href="http://stackoverflow.com/questions/4900029/javascript-context-in-anonymous-functions"&gt;stackoverflow thread&lt;/a&gt;, I got to know the answer is self executing
anonymous function and a return statement, so here it is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;someDiv&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);};}(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="anonymous functions"></category><category term="javascript"></category></entry><entry><title>C# Back to Basics</title><link href="http://hdra.github.io/hndr.me/blog/c-back-to-basics" rel="alternate"></link><updated>2012-05-20T23:12:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2012-05-20:blog/c-back-to-basics</id><summary type="html">&lt;p&gt;I have been programming C# for quite some time, but when I think about
it, I have never really tried to learn C# as a language, instead what
I’ve been playing with around are mostly the .NET framework itself, this
result in me having to guess the magic behind many of the operations in
the programs I wrote myself, and that sucks.&lt;/p&gt;
&lt;p&gt;I think this is a problem that plagues many .NET developers, because the
.NET framework is so powerful, many people can get away not knowing how
it works, but that can causes a lot of problems when I try to read on
some more advanced stuff, and not being able to even guess how that
work. Not to mention that relying on magic that I don’t understand don’t
really make me feel satisfied in writing programs.&lt;/p&gt;
&lt;p&gt;So, that’s why I decided to learn C# from the basics, and I will be
posting some of the stuff that I think I should remember here. I will be
using the &lt;a href="http://www.robmiles.com/c-yellow-book/"&gt;C# Yellow Book by Rob Miles&lt;/a&gt; for my reference, so a lot of
the posting that I will be doing may be similar to what’s in the book,
but I will be writing it in a way that I can easily understand myself.&lt;/p&gt;
&lt;p&gt;Well, that’s all for now, hope I can pull it off.&lt;/p&gt;</summary><category term="C#"></category><category term="Programming"></category></entry><entry><title>Phonegap in Visual Studio–There is no script engine for file extension ‘.js’</title><link href="http://hdra.github.io/hndr.me/blog/phonegap-in-visual-studio-there-is-no-script-engine-for-file-extension-js" rel="alternate"></link><updated>2012-03-28T21:59:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2012-03-28:blog/phonegap-in-visual-studio-there-is-no-script-engine-for-file-extension-js</id><summary type="html">&lt;p&gt;As I recently reinstalled my Windows system, I had to re-install almost
every programs I usually use again, one of them is the Visual Studio, and
since I have been messing around with Phonegap these days, I had to set
it up again. I did what I did before, copying the project template zip
file to my templates folder, and I tried to create a new Phonegap
project, but when I try to build it, Visual Studio gives me an error
saying : “There is no script engine for file extension .js”.&lt;/p&gt;
&lt;p&gt;This is pretty weird, since I set it up the same way last time, and it
works perfectly, so I did a bit of internet search, some other people
are having the same problem as well, and most of them suggested the fix
&lt;a href="http://www.winhelponline.com/articles/230/1/Error-There-is-no-script-engine-for-file-extension-when-running-js-files.html"&gt;here&lt;/a&gt;. I tried it, but it doesn’t work for me, further search leads me
to this &lt;a href="https://answers.microsoft.com/en-us/windows/forum/windows_7-system/fix-there-is-no-script-engine-for-file-extension/95d58867-3f31-45e3-aeaf-32ecea4d33c1"&gt;page&lt;/a&gt;, and this is the solution that worked for me. I changed
the file association for .js files back to the Microsoft Window Based
Script host ( it was associated with notepad++ before), and I tried to
compile it again, and everything is good again.&lt;/p&gt;</summary><category term="phonegap"></category><category term="programming"></category><category term="visual studio"></category><category term="windows 7"></category><category term="wp7"></category></entry><entry><title>Django Template System</title><link href="http://hdra.github.io/hndr.me/blog/django-template-system" rel="alternate"></link><updated>2012-03-23T20:19:00+08:00</updated><author><name>Hdra</name></author><id>tag:hdra.github.io/hndr.me,2012-03-23:blog/django-template-system</id><summary type="html">&lt;p&gt;Okay, last time I talked about the basic web page in Django, and it used
the shortest shortcut with the &lt;code&gt;render_to_reponse&lt;/code&gt;, but there are manual
way to do the same thing using &lt;code&gt;Template&lt;/code&gt; and &lt;code&gt;Context&lt;/code&gt; class, and there are
many scenario where we might want to do it the manual way to have more
control, so to do it manually, here is the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.template&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Template&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.template.loader&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_template&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Here is how to do it manually&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c"&gt;# load the raw template string to the variable,&lt;/span&gt;
    &lt;span class="c"&gt;# you can also manually define the string in the same file,&lt;/span&gt;
    &lt;span class="c"&gt;# but that wouldn&amp;#39;t be very maintainable, but it is basically&lt;/span&gt;
    &lt;span class="c"&gt;# an ordinary string&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;The Index Page&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# return the http request, and pass html as the&lt;/span&gt;
    &lt;span class="c"&gt;# body of the response&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="django"></category><category term="programming"></category><category term="python"></category></entry><entry><title>Basic Django Web Application</title><link href="http://hdra.github.io/hndr.me/blog/basic-django-web-application" rel="alternate"></link><updated>2012-03-23T15:57:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2012-03-23:blog/basic-django-web-application</id><summary type="html">&lt;p&gt;For the past few weeks, I have been writing quite a lot in PHP, more
specifically, CodeIgniter, and to be honest, writing web applications in
CodeIgniter is really easy and intuitive, and even though I came across
the MVC pattern (or MVT, for that matter) for the first time in Django,
I quickly forgotten even the basics of Django. So, in to prevent myself
from forgetting something like this again in the future, I am writing
this blogpost, to explain the basic of rendering a web page with Django.
I will only explain the most necessary functionality, so that means I
will use shortcuts whenever possible, and I wont be using any model in
this example, maybe I’ll write that sometime in the future.&lt;/p&gt;
&lt;p&gt;Okay, lets start. First of, after installing the django, run
&lt;code&gt;django-admin.py startproject basicDjango&lt;/code&gt; to start a new project. Next,
move into the project directory, and create a new folder named
&lt;code&gt;templates&lt;/code&gt;. This will be the folder you use to store the template files
for the project. We will come back here again later. Now, open up
&lt;code&gt;settings.py&lt;/code&gt; and find the line for &lt;code&gt;TEMPLATE_DIRS&lt;/code&gt;, and add the path to
the template directory there. Next, on your project’s root directory
level, create a new file named &lt;code&gt;views.py&lt;/code&gt;. Open up the file, and enter
these code which are the basic  functionalities that are in a view
function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# import the necessary modules&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render_to_response&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# render the template index.html with the context&lt;/span&gt;
    &lt;span class="c"&gt;# text equals to hello world&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="n"&gt;Index&lt;/span&gt; &lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Hello, World!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The way it works is, it loads up the template file(index.html), and will
replace the special tags in the template file with dictionary data you
passed in the second argument. Next, create the template file itself, in
the templates folder that you made before, create a new file index.html,
and put this inside it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;{{title}}&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{text}}&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, you got everything setup, and now, you just need to route the
request to the view function to handle, so to do that, open up urls.py,
and add this to the url pattern:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;views&lt;/span&gt;
&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^hello/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, you can run &lt;code&gt;python manage.py runserver&lt;/code&gt;, and navigate to your
browser to &lt;code&gt;http://localhost:8000/hello&lt;/code&gt;, and you should see the word
‘Hello World’ printed out.&lt;/p&gt;
&lt;p&gt;Note: If you are on windows, make sure the template paths are written
with forward slashes ‘/’. That’s all for now, but I think I will make
another post about how the Template system works in django without
shortcuts, and also about the model. Well, maybe next time.&lt;/p&gt;</summary><category term="django"></category><category term="programming"></category><category term="python"></category></entry><entry><title>Setting Up Python on Windows</title><link href="http://hdra.github.io/hndr.me/blog/setting-up-python-on-windows" rel="alternate"></link><updated>2012-03-22T11:47:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2012-03-22:blog/setting-up-python-on-windows</id><summary type="html">&lt;p&gt;Well, it’s a bit late for posting this, considering I have been playing
with Python for few months as I posted before, but, I recently
reinstalled my Windows, so I need to setup everything once again. This
time, I am trying to do it the right way, and my previous Python setup
isn’t really completely setup anyway, since I did most of my python
related works on my Linux Mint install. But recently, I have been
spending more time on Windows because of various things, so, well, here
goes. The distribution system in Python is a little but complicated, but
you can read more about it &lt;a href="http://www.b-list.org/weblog/2008/dec/14/packaging/"&gt;here&lt;/a&gt; and &lt;a href="http://blog.ianbicking.org/2008/12/14/a-few-corrections-to-on-packaging/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Basically, the standard Python distribution utilities is the distutils,
with it, you can install from the package source with &lt;strong&gt;python setup.py
install&lt;/strong&gt;. But there some problems with it, one of them is that it has
no way to track dependencies between packages, so there are other tools
that try to solve that problem, one of which is the &lt;strong&gt;setuptools&lt;/strong&gt;. When
you install the setuptools, it allows you to package your scripts and
specify any dependencies with it, which can be installed via its
distribution system, &lt;code&gt;easy_install&lt;/code&gt; which allows you to install
packages with &lt;code&gt;easy_install package_name&lt;/code&gt;. But, the setuptools
introduces another set of problem, where it causes weird behaviour and
some packages unusable unless it is installed via setuptools. So, the
recommended way to package and distribute python package is to use plain
vanilla distutils to package the scripts, and use &lt;strong&gt;pip&lt;/strong&gt; for
distribution. Instead of specifying dependencies in the setup.py file,
it allows you to create a separate file to specify the dependencies, and
process that instead. There are also &lt;strong&gt;distribute&lt;/strong&gt; which is a fork of
setuptools that tries to solve some of its shortcomings.&lt;/p&gt;
&lt;p&gt;Ok, now that we got clear, lets actually start setting up python, the
first one is installing Python itself, simple enough, download the MSI
installer, run it, and Python is now installed. The next step is adding
the python directory to the PATH environment variables. This is so that
you can run the various python commands without typing the full path.
The first one to add is the Python root directory (C:\Python27 in my
case), and also the Scripts directory (C:\Python27\Scripts in my case). I
didn’t add the second one to the PATH before, I wondered why can’t I run
commands such as pip and virtualenv directly before. and another thing,
I recently watched a video from pycon 2012 talking about the state of
Python on Windows, and I think the speaker mentioned something about the
new releases of Python installers for Windows includes the option to add
the environment variables and also have some of the directory structure
changed, but as I only watched the video briefly, I am not sure whether
it only applies to the new Python 3.x release or to the 2.x release as
well. I think I will just update it later.&lt;/p&gt;
&lt;p&gt;By now, you can say that Python is already completely setup on Windows,
but there are several other packages that should be installed.&lt;/p&gt;
&lt;p&gt;The first one is to get a python package manager, which can be used to
install and manage the installed packages on your system. There are
several options you can choose, I am using distribute together with pip.
To install distribute, the easiest way is download the
&lt;a href="http://python-distribute.org/distribute_setup.py"&gt;distribute_setup.py&lt;/a&gt;, and run it. To install pip, you can download
the zip files from http://pypi.python.org/pypi/pip, extract it, navigate
to the folder, and run python setup.py install.&lt;/p&gt;
&lt;p&gt;The next thing you should do is to install virtualenv. virtualenv is
basically a little python utility to setup a virtual isolated python
installation apart from your main python installation. With it, you can
install different version of the same libraries at the same time without
having them conflicts with each other. To install it, the easiest would
be to use pip that you installed before, so, run pip install virtualenv.&lt;/p&gt;
&lt;p&gt;After you install it, you can run the command virtualenv ENV to create a
new virtualenv named ENV. Activate it by going into &lt;code&gt;ENV\scripts\activate&lt;/code&gt;
which should change your shell prompt accordingly. Now any new packages
changes will be made locally to the active virtualenv without affecting
the global installation. After you are done, you can deactivate it and
switch back to the main python installation by running
&lt;code&gt;ENV\scripts\deactivate.bat&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next thing to do is to install django itself. Make sure your virtualenv
is active, unless you want django to be installed to the main django
installation. The easiest way to install django is to use pip: &lt;code&gt;pip install django&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And, you’re done! easy, isn’t it? You can test it by running the python
shell, and type import django. If there is no error, then you’re good to
go. Now, if you installed your django into your virtualenv, trying to
run &lt;code&gt;django-admin.py&lt;/code&gt; might gives you an &lt;code&gt;ImportError&lt;/code&gt; saying the it can’t
find the django.core module. This is because the .py file extensions are
associated with the main Python installation in your computer, and
running &lt;code&gt;django-admin.py&lt;/code&gt; directly from the command line will cause it to
run the script with that Python installation which doesn’t have django
installed, so, what you can do is either run the script with python
manually by specify the path of the &lt;code&gt;django-admin.py&lt;/code&gt;, or you can modify
your virtualenv activate script to change the file association, either
way, its up to you.&lt;/p&gt;</summary><category term="programming"></category><category term="python"></category><category term="windows"></category></entry><entry><title>Python Generator Expression</title><link href="http://hdra.github.io/hndr.me/blog/python-generator-expression" rel="alternate"></link><updated>2012-02-25T23:06:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2012-02-25:blog/python-generator-expression</id><summary type="html">&lt;p&gt;Continuing the last post, another thing i would like to note is the
generator expression in python. The function is almost the same as the
list comprehension, but instead of processing the whole data structures
at once, it performs the works one at a time. This would mean less
memory usage and performance when dealing with a massive amount of data.
To use it, just replace the square brackets on list comprehension with
parentheses.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;evens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;evens&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;evens&lt;/span&gt;

&lt;span class="c"&gt;# more example, this can apply to list comprehension as well&lt;/span&gt;
&lt;span class="c"&gt;# generate a tuple of possible combinations of odd and even number in the range&lt;/span&gt;
&lt;span class="n"&gt;permutation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Python"></category><category term="programming"></category></entry><entry><title>Python List Comprehension</title><link href="http://hdra.github.io/hndr.me/blog/python-list-comprehension" rel="alternate"></link><updated>2012-02-25T22:51:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2012-02-25:blog/python-list-comprehension</id><summary type="html">&lt;p&gt;Ok, been wanting to write about this for a while, in case i forgot, but
seems like I almost forgot about it. It's about a a feature of Python
that I don't really see in other languages i use such as C#, so I wanted
to write about this in case i forgot.&lt;/p&gt;
&lt;p&gt;Ok, so the list comprehension is a python feature that, as the name
suggest, create a new list based on an existing list. Well, I think it's
much easier for me to just write an example, this post is meant for
myself anyway.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#basically, to use list comprehension, surround the expression in square brackets&lt;/span&gt;
&lt;span class="n"&gt;aList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# create a new list of even numbers, the conditional operation is optional though.&lt;/span&gt;
&lt;span class="n"&gt;evens&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;aList&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="programming"></category><category term="python"></category></entry><entry><title>Windows Phone–Context Menu on a ListBox</title><link href="http://hdra.github.io/hndr.me/blog/windows-phone-context-menu-on-a-listbox" rel="alternate"></link><updated>2012-02-23T22:04:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2012-02-23:blog/windows-phone-context-menu-on-a-listbox</id><summary type="html">&lt;p&gt;Ok, I have been working on updating one of my windows phone app,
&lt;a href="http://www.windowsphone.com/en-US/apps/dca01efc-aaf9-4785-a165-642d8b8def34"&gt;Swatch 7&lt;/a&gt;. I added a feature that allows user to save the color they
picked. I have write more on that on another post, maybe after the app
on the marketplace is updated. So, to remove one finished doing that,
but I’llof the saved color, I used the context menu provided with the
windows phone toolkit. It’s a bit different in the way that I can’t
access the selected item of the &lt;code&gt;ListBox&lt;/code&gt; the ordinary way ( the
selectedIndex returns –1, so that means holding down a listbox item
doesn’t count as selecting it). So, I need a way to get information
about which item to remove, and after a bit of internet search, here is
how I do it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;ListBox&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;paletteList&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ListBox.ItemTemplate&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;DataTemplate&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;Grid&lt;/span&gt; &lt;span class="na"&gt;Margin=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;4&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;toolkit:ContextMenuService.ContextMenu&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;toolkit:ContextMenu&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;toolkit:MenuItem&lt;/span&gt; &lt;span class="na"&gt;Header=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Delete&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;removeFromPalette&amp;quot;&lt;/span&gt;
                                        &lt;span class="na"&gt;Click=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;removeFromPalette_Click&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;/toolkit:ContextMenu&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/toolkit:ContextMenuService.ContextMenu&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/Grid&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/DataTemplate&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ListBox.ItemTemplate&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ListBox&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Those are the code to set the context menu for the listbox, and here is
how the C# code on the click event:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;removeFromPalette_Click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RoutedEventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="n"&gt;selectedItem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;MenuItem&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;DataContext&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// Do whatever with the selectedItem&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="windows-phone"></category><category term="programming"></category></entry><entry><title>Python–Custom List Sorting Function</title><link href="http://hdra.github.io/hndr.me/blog/python-custom-list-sorting-function" rel="alternate"></link><updated>2012-01-30T19:26:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2012-01-30:blog/python-custom-list-sorting-function</id><summary type="html">&lt;p&gt;There are several ways to sort a list, where the basic ones is to use
the list.sort()  method to sort the list without returning anything, or
use the sorted() function that returns a new sorted list, but this
mostly works only on list that contains basic data types, if we want to
sort a list that contains something else (another list, tuple,
dictionary, custom classes, etc), we need to define a custom sorting
function.&lt;/p&gt;
&lt;p&gt;Sorting in Python is pretty simple, the list class provides a &lt;code&gt;sort()&lt;/code&gt;
function that we can use by default.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="c"&gt;#[1,2,3,4]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One of the example of scenario where we need a custom sorting function
is where we have custom data structure and we want to define which of
the class attribute that is used as they sorting key, in this case, we
will specify the key argument of the sorting function. In the examples,
the list.sort() method is used, but it can be used with the sorted()
function as well.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# consider we want to sort a list of string by its length&lt;/span&gt;

&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;car&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;television&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;laptop&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ok&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# specify key=len , for the len() function that will&lt;/span&gt;
&lt;span class="c"&gt;# return its length given a string&lt;/span&gt;

&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="c"&gt;# [&amp;#39;ok&amp;#39;,&amp;#39;car&amp;#39;,&amp;#39;laptop&amp;#39;,&amp;#39;television&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The key arguments takes a function name that takes an
argument and returns an object that will be used as the key, for
example, to define a custom key function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#for example, we want to sort a list of tuples based on its&lt;/span&gt;
&lt;span class="c"&gt;# last element:&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lastElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lastElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="c"&gt;#[(8,1),(1,2),(5,3),(3,4)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In addition, you can specify the reverse argument to true if you want it
to sort the list in descending order.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="c"&gt;#[4,3,2,1]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="programming"></category><category term="python"></category></entry><entry><title>Python Learning Progress–Part 4</title><link href="http://hdra.github.io/hndr.me/blog/python-learning-progress-part-4" rel="alternate"></link><updated>2012-01-26T11:21:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2012-01-26:blog/python-learning-progress-part-4</id><summary type="html">&lt;p&gt;Last time I talked about getting input and a little about conditional
statement and looping that should’ve enabled you to start creating the
basic application and implement some basic algorithm in Python. This
time, I am going to do a review on some of the basic data structures in
Python.&lt;/p&gt;
&lt;p&gt;The basic data structures in Python are: list, tuples, and dictionaries.&lt;/p&gt;
&lt;p&gt;Let me start with dictionaries. Dictionaries basically defines a
one-to-one relationship between a key and a value, just like an ordinary
dictionary, where a word is associated with its definition. To define a
dictionary in Python, the code are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# to define a dictionary, declare a&lt;/span&gt;
&lt;span class="c"&gt;# variable with its value enclosed&lt;/span&gt;
&lt;span class="c"&gt;# between two curly braces &amp;#39;{}&amp;#39;, and declare the &amp;#39;entries&amp;#39; with&lt;/span&gt;
&lt;span class="c"&gt;# the syntax, {key:value}, and separate each entry with a comma,&lt;/span&gt;
&lt;span class="c"&gt;# as you can see, the key and value can be mixed of any data type&lt;/span&gt;
&lt;span class="nb"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;John&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;sex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;male&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;number&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# to access it, call the variable name with the key in a bracket &amp;#39;[]&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;#will print John&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;#will print 20&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;#will print number&lt;/span&gt;

&lt;span class="c"&gt;# to change or delete the value, use the same method&lt;/span&gt;
&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;jack&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Some things to note about dictionary are, dictionary keys are
case-sensitive, and it is unordered.&lt;/p&gt;
&lt;p&gt;Next is the list. Lists are, well, lists, like dictionary, a list
contains an array of items. It is like the array list of other
programming languages. To define a list, declare the contents of the
list within a square brackets and separate it with commas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# declare a list of fruits&lt;/span&gt;
&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;orange&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;banana&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pear&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# to access it, use the index, starting from 0&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;#apple&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;#banana&lt;/span&gt;

&lt;span class="c"&gt;# enter a negative index to access the list from the last element&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;#pear&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;#banana&lt;/span&gt;

&lt;span class="c"&gt;# accessing a subset of the list (known as slicing)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;#access the list from index 0-2&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;#access the list from index 1-3&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;#access the list from the beginning until index 3&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="c"&gt;#access the list from index 1 until the last element&lt;/span&gt;

&lt;span class="c"&gt;# to change it, use the same syntax&lt;/span&gt;
&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mango&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# or to delete it&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# to add an element to the end of the list, use append() method&lt;/span&gt;
&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tomato&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# to extend the list with another list, use the extend() method&lt;/span&gt;
&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;strawberry&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;grapes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c"&gt;# to insert an element into the list, use the insert() method, which&lt;/span&gt;
&lt;span class="c"&gt;# takes the index of the list to insert, and the item to insert&lt;/span&gt;
&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lemon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#insert lemon into index #1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In addition to these basic operation, a list provides a lot of other
functions as well, one of them is the function to search for an element
inside a list.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;li&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;banana&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pear&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mango&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# to search for an index of an element&lt;/span&gt;
&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;banana&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#will return 1&lt;/span&gt;
&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;orange&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#will throws an exception, because orange isnt in the list&lt;/span&gt;

&lt;span class="c"&gt;# to check if an element is inside a list&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;li&lt;/span&gt; &lt;span class="c"&gt;#return true&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;orange&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;li&lt;/span&gt; &lt;span class="c"&gt;#return false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are several variations in removing an item from a list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;li&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;orange&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pear&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;grape&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# the basic del operation, which will remove an element at a specified index&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;#will remove apple&lt;/span&gt;

&lt;span class="c"&gt;# the remove() method, which will remove the first occurance of an element&lt;/span&gt;
&lt;span class="c"&gt;# this statement will remove the first occurance of banana&lt;/span&gt;
&lt;span class="c"&gt;# if there are more than one occurance of banana, only the first one will be removed&lt;/span&gt;
&lt;span class="c"&gt;# if there isnt any banana inside the list, it will raise an exception&lt;/span&gt;
&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# the pop() method, which will remove the last value from the list,&lt;/span&gt;
&lt;span class="c"&gt;# and at the same time return that value&lt;/span&gt;
&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# will return grape, and remove it from the list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are other operations on a list as well,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;li&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# this will return the list[1,2,3,4,5,6,7,8]&lt;/span&gt;
&lt;span class="c"&gt;# similar to the extend() method, but it returns a new list&lt;/span&gt;
&lt;span class="c"&gt;# instead of directly performing the operation on the list&lt;/span&gt;
&lt;span class="n"&gt;li&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;

&lt;span class="c"&gt;# this will repeat the list 3 times, so the content of li&lt;/span&gt;
&lt;span class="c"&gt;# will be [1,2,1,2,1,2]&lt;/span&gt;
&lt;span class="n"&gt;li&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next is the tuple, a tuple is basically a list that cant be changed. It
has almost the same function the same functions as a list, but the
content can’t be changed, so a tuple doesn’t have the &lt;code&gt;remove()&lt;/code&gt;, &lt;code&gt;pop()&lt;/code&gt;,
&lt;code&gt;append()&lt;/code&gt; or any other method that make changes to a list. Tuples are
usually used to create a constant list, whose values wont change. In
general, tuples are faster than lists, and there are also other specific
uses of a tuples that will be explored later. To create a tuple, the
syntax is similar to a list, but instead of a square bracket, a tuple is
declared with ordinary brackets.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;tp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# it can be accessed the same way&lt;/span&gt;
&lt;span class="n"&gt;tp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;#a&lt;/span&gt;
&lt;span class="n"&gt;tp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;#c&lt;/span&gt;
&lt;span class="n"&gt;tp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;#will throw an error&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Those are the basic data structures in Python, each of those are kind of
similar to each other, but they have specific purposes that are unique
to each of them. For example, a tuple can contain a list of another
list, and a list can also nest several level of lists.&lt;/p&gt;</summary></entry><entry><title>WP7 Apps–Swatch 7</title><link href="http://hdra.github.io/hndr.me/blog/wp7-apps-swatch-7" rel="alternate"></link><updated>2012-01-17T00:14:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2012-01-17:blog/wp7-apps-swatch-7</id><summary type="html">&lt;p&gt;Another WP app on the marketplace,
&lt;a href="http://www.windowsphone.com/en-US/apps/dca01efc-aaf9-4785-a165-642d8b8def34"&gt;http://www.windowsphone.com/en-US/apps/dca01efc-aaf9-4785-a165-642d8b8def34&lt;/a&gt;.
It’s a pretty simple color picker that lets you pick a color, and provide you with the RGB value and HEX code. There are two kind of picker available, the usual color slider and a honeycomb picker.&lt;/p&gt;
&lt;p&gt;&lt;img alt="app screenshot 1" src="http://farm8.staticflickr.com/7164/6720680373_4ddbfcb8ef.jpg" /&gt;
&lt;img alt="app screenshot 2" src="http://farm8.staticflickr.com/7155/6720679391_a66aaf368d.jpg" /&gt;
&lt;img alt="app screenshot 3" src="http://farm8.staticflickr.com/7031/6720678217_b76d9c449a.jpg" /&gt;
&lt;img alt="app screenshot 4" src="http://farm8.staticflickr.com/7026/6720672637_5e07a9d8e4.jpg" /&gt;&lt;/p&gt;</summary><category term="apps"></category><category term="windows-phone"></category></entry><entry><title>Python Learning–Part 3</title><link href="http://hdra.github.io/hndr.me/blog/python-learning-part-3" rel="alternate"></link><updated>2012-01-12T20:10:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2012-01-12:blog/python-learning-part-3</id><summary type="html">&lt;p&gt;Well, I was pretty busy this week, and I haven’t touch too much of
Python these days, and even if if I done some exercise on Python, I was
too lazy to write up a blog post for it, but I promised I will blog more
to keep track of my progress, so here I am writing this.&lt;/p&gt;
&lt;p&gt;Ok, so this time, I want to talk about the getting input from the user,
and  flow control in Python, in other words, I am going to talk about
conditional statement and loop.&lt;/p&gt;
&lt;p&gt;Let’s start with the user input. The basic input function in python is
&lt;code&gt;raw_input()&lt;/code&gt;, which gets whatever the user entered, and process it as a
string. You can pass an optional string argument that will be used as
the prompt, here is an example code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;What is your name?&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="c"&gt;#or you can pass the prompt as an argument&lt;/span&gt;

&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;What is your name?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another option is to use the &lt;code&gt;input()&lt;/code&gt;, which is is similar to the
&lt;code&gt;raw_input&lt;/code&gt;, except that the user input isn’t processed as a string, but
as an expression. So, if you entered a number, it will process the input
as a number, or if you entered an variable name, it will be processed as
an variable, and so on&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# x is 5&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter a number: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#enter &amp;#39;5&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# x is 12&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter another number: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#enter &amp;#39;4*3&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# this will produce an error, because John is not defined as a variable&lt;/span&gt;

&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter a name: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#enter &amp;#39;John&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# y will be equal to x, because the input will be processed as avariable&lt;/span&gt;

&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter a letter: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#enter &amp;#39;x&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ok, the next part is where things start to get fun, the basic flow
control in python using if, elif, and else. Before I begin, let me talk
a little bit about code blocks and boolean values. Code blocks are
basically a group of code, which can consist of one or more statements
and declarations. In addition, the variables inside a code block are
isolated from the code outside of the block, so a variable declared
inside a code block cant be used outside of the block. Code blocks are
used in many places in programming, one of them is the conditional and
looping statements. Code blocks are expressed in various ways in
different programming languages, some of them uses the curly braces { }
(C++, C#, Java), some of them uses the BEGIN and END (VB) keyword, and
in Python, we uses indentation (4 spaces), so the codes that are
indented  are considered as a block of code, and to nest several levels
of code blocks, just add more indentation to the lines of code.&lt;/p&gt;
&lt;p&gt;Boolean values are basically logical true or false values. Comparison
operators will always return a boolean value of either true or false,
even though comparison operators are not the only thing that can return
a boolean value, it is the basics of it. Comparison operations in Python
are pretty much self-explanatory, and it is similar to other programming
language:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#Equal&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c"&gt;#True&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c"&gt;#False&lt;/span&gt;

&lt;span class="c"&gt;#Greater than/Equal&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c"&gt;#False&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c"&gt;#True&lt;/span&gt;

&lt;span class="c"&gt;#Less than/Equal&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c"&gt;#False&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c"&gt;#True&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c"&gt;#True&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="c"&gt;#True&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="c"&gt;#True&lt;/span&gt;

&lt;span class="c"&gt;# there are also the &amp;#39;and&amp;#39;, &amp;#39;or&amp;#39;, and &amp;#39;not&amp;#39; keyword&lt;/span&gt;
&lt;span class="c"&gt;# and will evaluate to true if both are true&lt;/span&gt;
&lt;span class="c"&gt;# or will evaluate to true if one of the is true&lt;/span&gt;
&lt;span class="c"&gt;# and not will produce the reverse value&lt;/span&gt;

&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="c"&gt;#True&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="c"&gt;#False&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c"&gt;#True&lt;/span&gt;
&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="c"&gt;#False&lt;/span&gt;

&lt;span class="c"&gt;#and so on&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I am not sure how to explain code indentation in plain english, so let
me just write some example if statement code,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Please enter a number: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;You entered a number greater than 10&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;You entered a number that is less than 5&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;You entered a number between 5 and 10&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, the if statement will test if the statement
is true or not, followed by a colon and an indented lines to specify
which code to execute if the statement evaluates to true, the next elif
statement will be executed only if the first if statement is false, and
it will test it the statement again. You can put as many elif statement
as you want, and finally, an else statement is put there to specify
which code to execute if all of the tests before it evaluate to false.
The elif and the else statement are optional, which means you can write
a code to only run when a certain condition is met, or do nothing if
that certain condition is not met. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter your name: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;#Only print these statements if the name is John&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;John&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello, John! Good to see you again.&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;What can I do for you today, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The next thing I am going to talk about is looping. Similar
to the conditional statement, looping uses code blocks to specify
several statements of code to run as well. There are two ways to create
a loop, the first one is the while loop, which will continue to run as
long as the boolean statement remains true. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# This one will run the loop endlessly, because the boolean statement&lt;/span&gt;
&lt;span class="c"&gt;# is hardcoded as True&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Never ending loop&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Press ctrl-c or ctrl-z to terminate&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# You should add a statement to eventually cause the boolean statement&lt;/span&gt;
&lt;span class="c"&gt;# turns False&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c"&gt;#initialize x to 1&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c"&gt;#continue to run the loop as long as the value of x &amp;lt; 10&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Count no.&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c"&gt;#increase the value of x by one on each iterations&lt;/span&gt;
           &lt;span class="c"&gt;#so that eventually the x &amp;lt; 10 statement will be false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The second type of loop is the for loop, which will loop through the
content of a list one by one. (I will talk about list in another post,
but basically, a list is just a sequence of values that is identified by
a single variable).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# the basic syntax of a for loop is:&lt;/span&gt;
&lt;span class="c"&gt;# for [variable name] in [list]:&lt;/span&gt;
&lt;span class="c"&gt;# #codes for the loop&lt;/span&gt;
&lt;span class="c"&gt;# for example:&lt;/span&gt;

&lt;span class="c"&gt;#Defining a list, more on this later&lt;/span&gt;
&lt;span class="n"&gt;nameList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;John&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Jack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Adam&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# running the loop, printing the content of the list&lt;/span&gt;
&lt;span class="c"&gt;# one by one&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nameList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello,&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="c"&gt;# The code above will print John,Jack and Adam on the console&lt;/span&gt;
&lt;span class="c"&gt;# You can also generate a list of numbers by using the range function&lt;/span&gt;
&lt;span class="c"&gt;# the range function takes two arguments, the beginning and the end of&lt;/span&gt;
&lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;

&lt;span class="c"&gt;# Will print the numbers 2-10&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="programming"></category><category term="python"></category></entry><entry><title>My First WP7 Apps on the Marketplace–Demotivator 7</title><link href="http://hdra.github.io/hndr.me/blog/my-first-wp7-apps-on-the-marketplace-demotivator-7" rel="alternate"></link><updated>2012-01-10T20:35:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2012-01-10:blog/my-first-wp7-apps-on-the-marketplace-demotivator-7</id><summary type="html">&lt;p&gt;Ok, so I mentioned that I am developing several Windows Phone 7 Apps,
and I actually got one of them published on the marketplace! Most of the
others are still unpublished yet though, either its going on review, or
well, I just didn’t finish it.&lt;/p&gt;
&lt;p&gt;So, here is the one that got it to the marketplace. Demotivator 7, it’s
a application to create demotivator posters from the pictures stored in
the phone. The download link is &lt;a href="http://www.windowsphone.com/en-US/apps/f7f72a6f-15b6-408c-9b25-80b5651ef501"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot 1" src="https://farm8.staticflickr.com/7158/6672744873_a06b651ce4.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot 2" src="https://farm8.staticflickr.com/7149/6672743421_d035f82905.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;There are some bugs when creating a portrait poster, I already fixed
that, but I just don’t feel like updating it yet because of the
troublesome upload process, so, maybe later.&lt;/p&gt;</summary><category term="apps"></category><category term="windows-phone"></category></entry><entry><title>Python learning progress part.1</title><link href="http://hdra.github.io/hndr.me/blog/python-learning-progress-part1" rel="alternate"></link><updated>2012-01-09T19:55:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2012-01-09:blog/python-learning-progress-part1</id><summary type="html">&lt;p&gt;Ok, so last time I mentioned that I began learning Python. with the Zed
Shaw’s Learn Python The Hard Way as a guide, so far, it has been a
pretty good experience. So, in this blog, I will try to summarize what I
learned by trying to explain it in a way that I think easy to
understand, in doing that I hope I can get more understanding about it.&lt;/p&gt;
&lt;p&gt;Before I begin, let me say my impression with it so far. With C++ as the
first programming language I learned, and the majority of my codes
written in fully object oriented language such as Java and C#, I find a
scripting language such as Python to be “different”. To begin with, the
dynamic typed variables, where a variable can be of any type, an
integer, a floating point number, a string, or even a function. Most
people says this is one of Python’s strength, but so far, I haven’t been
able to figure out how this will help me in creating programs other than
creating some confusion. Maybe its just me that hasn’t reached the point
where I can actually take advantage of a dynamically type language such
as Python.&lt;/p&gt;
&lt;p&gt;Anyway, lets go back to the main topic where I will try to explain
Python in a way where I find easy to understand. I wont be talking about
the installation of the Python, since its pretty straight forward both
on Windows and Linux. So I will start with the coding part.&lt;/p&gt;
&lt;p&gt;Like most programming language guide, I will begin with a simple hello
world application. The hello world in Python is very simple.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello, World&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That’s all, save it as with a .py extension, and run the command &lt;code&gt;python filename.py&lt;/code&gt;
 in the cmd/terminal to run it. Another alternative is to run
command python in the cmd/terminal to enter the python shell, where the
python commands can be entered and run like a command prompt
instruction.&lt;/p&gt;
&lt;p&gt;The print statement is pretty straight forward, it will produce the
output to the screen. Each of the print statement will print the output
in a new line, so,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#These will print these two things on a different line&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello,&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Its a wonderful world&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Will print ‘Hello, World’ and ’It’s a wonderful world.’ in a separate
line, and by the way, the ‘#’ characters comments out the line, so that
it will be ignored by the Python interpreter. Math are also very simple,
as usual, combinations of operators and number will do the job.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The variables in python are dynamically typed, so a variable can be an
integer, a string, or any other type depending on the value.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="c"&gt;#will print 15&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;

&lt;span class="c"&gt;#and we can change it to a value of a different type&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Now this is a string&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;#we can still print it in the same way&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="programming"></category><category term="python"></category></entry><entry><title>Kinect Project Status Update I - Tools for building a Kinect Applications</title><link href="http://hdra.github.io/hndr.me/blog/kinect-project-status-update-i-tools-for-building-a-kinect-applications" rel="alternate"></link><updated>2011-10-14T12:24:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2011-10-14:blog/kinect-project-status-update-i-tools-for-building-a-kinect-applications</id><summary type="html">&lt;p&gt;&lt;img alt="Kinect" src="http://farm7.static.flickr.com/6177/6266069590_5f69b81c46.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Previously, I wrote about testing the water with Kinect, and well, it
seems like I am drowning now. The development process is much more
complicated that I thought.&lt;/p&gt;
&lt;p&gt;To begin with, there are several drivers available for the Kinect, the
most commonly used are the official &lt;a href="http://research.microsoft.com/en-us/um/redmond/projects/kinectsdk/"&gt;Kinect for Windows SDK from
Microsoft&lt;/a&gt;, the &lt;a href="http://www.openni.org"&gt;OpenNI&lt;/a&gt; from PrimeSense, and the community maintained
&lt;a href="http://www.openkinect.org"&gt;OpenKinect&lt;/a&gt; (libfreenect). So, the first problem is choosing which one
to install on your system, sounds easy enough, but it is not. All of
them have their own pro and cons, and they can't be installed on the
same system side by side, so let's talk about them one by one.&lt;/p&gt;
&lt;p&gt;First, the Kinect for Windows SDK from Microsoft, as expected, this SDK
only support Windows systems, so its pretty straight forward to use it.
The installation is pretty simple as well, download the installer, and
run it on your computer, then you are ready to develop your own Kinect
applications. The development process is also straight forward, open up
Visual Studio, add the reference to the Kinect libraries, and start
using it. Microsoft also provided us with a series of &lt;a href="http://channel9.msdn.com/coding4fun/kinect/Getting-started-with-the-Kinect-for-Windows-SDK-quickly-with-the-Kinect-Quickstarts"&gt;quick start
videos&lt;/a&gt;, making it even easier for us get started. Developers also have
the choice to program in either C# or C++. For the time being this is
the one installed in my Windows system.&lt;/p&gt;
&lt;p&gt;But, there are several downsides to this, the SDK is still relatively
new, so there are limited 3rd party libraries and projects, in addition,
the license agreement that come with the SDK is pretty restricting,
added with the fact the the source are not available, the aren't many
hackers out there are experimenting with it compared with the other two
options. Another catch is that it has a minimum range of 850mm from the
sensor for the depth camera to work, this is very important, as I think
there is a possibility that I am going to deal with finger gestures
pretty often, the distance would make it difficult to track the fingers.
I also haven't seen any libraries for gesture recognition provided for
this, even the AForge.NET libraries only support the libfreenect. But
then, the SDK is still in its beta stage, so I hope Microsoft can get
the official release out soon, with more features and less restricting
license agreement.&lt;/p&gt;
&lt;p&gt;Next up is the PrimeSense's OpenNI. PrimeSense is the company who
developed the Kinect hardware for Microsoft. The are three primary
components of the driver they provide. They are the OpenNI library
itself, the NITE libraries, and the Sensor Driver. The Sensor Driver are
used so that the computer can recognize the sensor hardware (the OpenNI
doesn't only support the Microsoft Kinect, but it also support other
PrimeSense compliant hardware, such as Asus's Xtion), an alternative to
this is the &lt;a href="https://github.com/avin2/SensorKinect"&gt;avin's Sensor Kinect&lt;/a&gt; which is a fork of the OpenNI's
Sensor driver. Next is the NITE libraries, the NITE libraries is an
optional component, it provides the algorithms for skeletal tracking and
other functionalities, and this library is not open source. Last, is the
OpenNI library itself, this component provides the functionality so that
the computer can consume the audio, color video, and depth video data
from the sensor.&lt;/p&gt;
&lt;p&gt;OpenNI has been around for quite a while, and there are a lot of
projects developed using it, it is also cross-platform. There are many
software components that are built for it, such as the Point Cloud
Library, and OpenCV and many others. Of course, those libraries can also
be used for other drivers, but it would take quite a lot of work to do
it. The main language used in this SDK is C, but there are wrappers for
other languages provided. The driver is open source, and the license
provide quite a lot of freedom for the developers, so there are a lot of
projects built on it.&lt;/p&gt;
&lt;p&gt;There is a installer wizard for Windows provided, but since I already
installed the Kinect for Windows SDK, I can't install it on my Windows
system. Since I also have Ubuntu installed on my laptop, I tried to
install it on it, but it is not as easy as I thought, after several
build errors and other stuff, I downloaded the binaries of all three
components, and installed it, but when i try to run any of the samples,
bit it gives me this error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;InitFromXml&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Failed&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;USB&lt;/span&gt; &lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I tried to build manually from the source, same error. Tried to built
with the RedistMaker provided with the source, same error. So, I haven't
been able to try it out.&lt;/p&gt;
&lt;p&gt;Last but not least, is the OpenKinect. This one is open source as well,
and since it was one of the first Kinect hack available, there aren't
any shortage of project samples and 3rd party software components, the
AForge.NET framework also support this driver. Like the OpenNI,
OpenKinect is also a cross platform sofware, so we can install it on
Windows, Linux, or Mac OSX. The installation is much more
straightforward compared to OpenNI, there are only one component to
install, which is the libfreenect. The other dependencies can be easily
found as well. The one of the optional component is the
libfreenect-demos, which provides you with several sample project. Just
like the OpenNI, i tried to install it on my Ubuntu system. Tried to run
the sample, an error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Could&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;claim&lt;/span&gt; &lt;span class="n"&gt;interface&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="n"&gt;Could&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, I haven't been able to run this one either.&lt;/p&gt;
&lt;p&gt;So for now, I only have access to the Kinect for Windows SDK, I guess I
should just meddle with the Kinect SDK for now, and keep looking for
solutions on the other two alternatives.&lt;/p&gt;</summary><category term="kinect"></category><category term="programming"></category></entry><entry><title>Testing the water on Kinect Applications</title><link href="http://hdra.github.io/hndr.me/blog/testing-the-water-on-kinect-applications" rel="alternate"></link><updated>2011-10-02T16:01:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2011-10-02:blog/testing-the-water-on-kinect-applications</id><summary type="html">&lt;p&gt;Okay, so I am started planning my final year project this semester, and
for this first phase, I am only required to do the planning, the
documentation and well, the report stuffs, but, since I don't have any
pictures of the Microsoft Kinect application development, I decided to
do some coding on it as well.&lt;/p&gt;
&lt;p&gt;Since there are so many possibilities on what the Kinect can do, there
are several choices on what kind of application I am going to do, I need
to narrow it down. My project is trying to use the Kinect to recognize
sign language, and translate them. In other words, besides doing the
skeleton tracking, I also need to do some form of gesture recognition,
and also, I need to at least know a little bit of the sign language
itself. Of course, I still know very little of those things.&lt;/p&gt;
&lt;p&gt;First thing to do, of course I need to look up for some samples of the
Kinect hack itself, even though it is not doing the same thing, at least
it can help me get an idea what the Kinect is capable of. It is not a
difficult thing, a little bit of search on any search engine would get
me a lot of results.&lt;/p&gt;
&lt;p&gt;Here is the one that impressed me the most: &lt;a href="http://www.youtube.com/watch?v=quGhaggn3cQ"&gt;http://www.youtube.com/watch?v=quGhaggn3cQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The program can scan the room with the Kinect, and the program will
process the input from the Kinect, and create a 3d scene with it.
Imagine what it can do if the Kinect's image sensor have higher
resolution. I wonder how they did that. Of course, that is much more
sophisticated than what I am trying to do, just by looking at the people
involved in the project, you can see how serious that project is.&lt;/p&gt;
&lt;p&gt;Here are some of the impressive works: &lt;a href="http://www.youtube.com/watch?v=ho8KVOe_y08"&gt;http://www.youtube.com/watch?v=ho8KVOe_y08&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;and this video shows how it can be integrated with other devices from
Microsoft: &lt;a href="http://www.youtube.com/watch?v=2mktWd0-WGs"&gt;http://www.youtube.com/watch?v=2mktWd0-WGs&lt;/a&gt;&lt;/p&gt;</summary><category term="kinect"></category><category term="programming"></category></entry><entry><title>My First Android Application</title><link href="http://hdra.github.io/hndr.me/blog/my-first-android-application" rel="alternate"></link><updated>2011-07-02T22:35:00+08:00</updated><author><name>Hendra</name></author><id>tag:hdra.github.io/hndr.me,2011-07-02:blog/my-first-android-application</id><summary type="html">&lt;p&gt;Ok, I think I mentioned that I (with a partner in my group) am
developing an Android application for a class assignment, and here it
is, its finished, but not a really usable apps though.&lt;/p&gt;
&lt;p&gt;It’s a app to encrypt SMS before sending it. It uses an asymmetric
encryption algorithm, RSA, meaning that the key exchange needs to be
done before sending any encrypted message. The encryption and decryption
can only be done within the apps itself.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot" src="https://farm8.staticflickr.com/7015/6678908805_b0da41bdb0.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;The development process aren’t very intuitive IMO, the emulator are just
plain unusable, and eclipse integration just didn’t feel ‘native’.
Switching between code view and design view takes several seconds to
load, but then, maybe that’s just my laptop. The main programming
language used is Java, so there isn’t too much problem there, but I am
not really used to the UI markup system, maybe I need more experience to
get into it. Still, the biggest problem is the emulator, honestly,
during the development process, whenever I did some change, I always
feel reluctant to test it, because everything is just so slow. I don’t
have any plan yet, but maybe I will look more into this sometime in the
future.&lt;/p&gt;
&lt;p&gt;Well, as mentioned before, its not a really usable app, I don’t really
understand the RSA algorithm, and I don’t put any effort in making the
interface good looking either. But then, whatever,&lt;/p&gt;</summary><category term="android"></category><category term="programming"></category><category term="school"></category></entry></feed>